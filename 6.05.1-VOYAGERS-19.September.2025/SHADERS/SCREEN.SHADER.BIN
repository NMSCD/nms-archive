[[FX]]

sampler gDiffuseMap = sampler_state
{
    TexUnit = 0;
};

sampler gNormalMap = sampler_state
{
    TexUnit = 1;
};

sampler gNormal2Map = sampler_state
{
    TexUnit = 3;
};

sampler gDiffuse2Map = sampler_state
{
    TexUnit = 4;
};

sampler gMasksMap = sampler_state
{
    TexUnit = 5;
};

sampler gFeaturesMap = sampler_state
{
    TexUnit = 6;
};

sampler gCausticMap = sampler_state
{
    TexUnit = 7;
};

sampler gCausticOffsetMap = sampler_state
{
    TexUnit = 8;
};

sampler gShadowMap = sampler_state
{
    TexUnit = 9;
};

sampler gCloudShadowMap = sampler_state
{
    TexUnit = 10;
};

sampler gDiffEnvMap = sampler_state
{
    TexUnit = 11;
};

sampler gSpecEnvMap = sampler_state
{
    TexUnit = 12;
};

sampler gNoiseMap = sampler_state
{
    DefaultTexture = SHADER/CLOUDNOISE.DDS;
    TexUnit = 16;
    Address = Wrap;
};

sampler gPerlin3D = sampler_state
{
    DefaultTexture = SHADER/NOISEHALF.DDS;
    TexUnit = 17;
    Address = Wrap;
};

sampler gFadeNoiseMap = sampler_state
{
    DefaultTexture = SHADER/BLUENOISE.DDS;
    TexUnit = 18;
    Address = Wrap;
};

sampler gDepthBuffer = sampler_state
{
    Address = Clamp;
    TexUnit = 19;
};

sampler gBufferMap = sampler_state
{
    Address = Clamp;
    TexUnit = 20;
};

//TF_BEGIN
sampler gLightCluster = sampler_state
{
	ImgUnit = 0;
};

sampler gLightCookiesMap = sampler_state
{
    Address = Clamp;
    TexUnit = 21;
};
//TF_END


context LIT_FORWARD
{
	VertexShader = compile GLSL VS_GENERAL;
	PixelShader  = compile GLSL FS_LIGHTING;
}

context LIT_FORWARD_WITH_MASK
{
    VertexShader = compile GLSL VS_GENERAL;
    PixelShader  = compile GLSL FS_LIT_FORWARD_WITH_MASK;
}

context SHADOW_FADE
{
    VertexShader = compile GLSL VS_DEPTHONLY_FRWRD;
    PixelShader = compile GLSL FS_DEPTHONLY_FRWRD;
}

context DEPTHONLY_FRWRD
{
    VertexShader = compile GLSL VS_DEPTHONLY_FRWRD;
    PixelShader  = compile GLSL FS_DEPTHONLY_FRWRD;
}

context LIT_FRWD_NS_NP
{
    VertexShader = compile GLSL VS_LIT_FORWARD_NS_NP;
    PixelShader  = compile GLSL FS_LIT_FORWARD_NS_NP;
}

context LIT_DEFER
{
	VertexShader = compile GLSL VS_DEFER_MVEC;
	PixelShader  = compile GLSL FS_LIT_DEFER;
}

context [ SWITCH ] LIT_DEFER_ZE
{
    VertexShader = compile GLSL VS_DEFER_MVEC_ZE;
    PixelShader = compile GLSL FS_LIT_DEFER_ZE;
}

//TF_BEGIN
context [ IOS ] LIT_FW_TIL
{
	VertexShader = compile GLSL VS_GENERAL_FRWD_TILED;
	PixelShader = compile GLSL FS_LIGHTING_FRWD_TILED;
}

context [ MACOS ] LIT_FW_TIL
{
    VertexShader = compile GLSL VS_GENERAL_FRWD_TILED;
    PixelShader = compile GLSL FS_LIGHTING_FRWD_TILED;
}

//TF_END
uint4  gDynamicFlags = {0, 0, 0, 0};

float4 gUIDeformVec4                    = {1.0, 1.0, 400.0, 1.0};

// Scan
float4 gScanParamsPosVec4               = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg1Vec4              = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg2Vec4              = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg3Vec4              = {0.0, 0.0, 0.0, 0.0};

// Planet
float4 gPlanetPositionVec4		= {0.0, -1204.0, 0.0, 1204.0};
float4 gLightOriginVec4   = {0.0, 0.0, 0.0, 0.0}; 

// Lighting
float4 gMaterialParamsVec4              = {0.9, 0.5, 0.0, 0.5};

// Texturing
float4 gMaterialColourVec4              = {1.0, 0.0, 0.0, 1.0};
float4 gUVScrollStepVec4                = {0.0, 0.0, 0.0, 0.0};
float4 gCustomParams02Vec4              = {0.0, 1.0, 1.0, 0.0};
float4 gCustomParams01Vec4              = {0.0, 0.0, 0.0, 0.0};
                                       
// Vertex Displacement                 
float4 gWaveOneAmpAndPosOffsetVec4 = {0.0, 0.0, 0.0, 0.0};
float4 gWaveOneFrequencyVec4                     = {0.0, 0.0, 0.0, 0.0};
float4 gWaveOneFallOffAndSpeedVec4               = {0.0, 0.0, 0.0, 0.0};
float4 gWaveTwoAmplitudeVec4                     = {0.0, 0.0, 0.0, 0.0};
float4 gWaveTwoFrequencyVec4                     = {0.0, 0.0, 0.0, 0.0};
float4 gWaveTwoFallOffAndSpeedVec4               = {0.0, 0.0, 0.0, 0.0};

//TF_BEGIN
float4 gHDRParamsVec4 = { 0.0, 0.0, 0.0, 0.0 };
float4 gDoFParamsVec4 = { 0.0, 0.0, 0.0, 0.0 };
float4 gRainParametersVec4 = { 0.0, 0.0, 0.0, 0.0 };

[[VS_GENERAL_FRWD_TILED]]
// =================================================================================================
#define D_FORWARD_RENDERER
#define D_TILED_LIGHTS
#define D_BLOOM
#define D_DOF
#include "UberVertex.shader.h"

[[FS_LIGHTING_FRWD_TILED]]
// =================================================================================================
#define D_FORWARD_RENDERER
#define D_TILED_LIGHTS
#define D_BLOOM
#define D_DOF
#include "Custom/ScreenFragment.shader.h"

//TF_END

[[FS_LIGHTING]]
// =================================================================================================
// #define D_NO_POSTPROCESS // define this to make the gun screen appear in the fwd pipeline
#include "Custom/ScreenFragment.shader.h"

[[VS_LIT_FORWARD_NS_NP]]
// =================================================================================================
#define D_LIT_FORWARD
#define D_NO_SHADOWS
#define D_NO_POSTPROCESS
#include "UberVertex.shader.h"

[[FS_LIT_FORWARD_NS_NP]]
// =================================================================================================
#define D_LIT_FORWARD
#define D_NO_SHADOWS
#define D_NO_POSTPROCESS
#include "Custom/ScreenFragment.shader.h"




[[VS_GENERAL]]
// =================================================================================================
#include "UberVertex.shader.h"


[[VS_GENERAL_NS]]
// =================================================================================================
#define D_NO_SHADOWS
#define D_NO_POSTPROCESS
#include "UberVertex.shader.h"

[[VS_DEFER]]
// =================================================================================================
#define D_DEFER
#include "UberVertex.shader.h"

[[VS_DEFER_MVEC]]
// =================================================================================================
#define D_DEFER
#define D_OUTPUT_MOTION_VECTORS
#include "UberVertex.shader.h"

[[VS_DEFER_MVEC_ZE]]
// =================================================================================================
#define D_DEFER
#define D_OUTPUT_MOTION_VECTORS
#define D_ZEQUALS
#include "UberVertex.shader.h"


[[FS_LIT_DEFER]]
// =================================================================================================
#define D_DEFER
#define D_ATTRIBUTES
#define D_OUTPUT_MOTION_VECTORS
#include "Custom/ScreenFragment.shader.h"

[[FS_LIT_DEFER_ZE]]
// =================================================================================================
#define D_DEFER
#define D_ATTRIBUTES
#define D_OUTPUT_MOTION_VECTORS
#define D_ZEQUALS
#include "Custom/ScreenFragment.shader.h"

[[FS_LIT_FORWARD_WITH_MASK]]
// =================================================================================================
#define D_LIT_WITH_MASK
#include "Custom/ScreenFragment.shader.h"

[[VS_DEPTHONLY_FRWRD]]
// =================================================================================================
#define D_NO_SHADOWS
#define D_DEPTHONLY
#define D_NO_POSTPROCESS
#include "UberVertex.shader.h"

[[FS_DEPTHONLY_FRWRD]]
// =================================================================================================
#define D_DEPTHONLY
#define D_NO_POSTPROCESS
#define D_NO_SHADOWS
#include "UberFragment.shader.h"
