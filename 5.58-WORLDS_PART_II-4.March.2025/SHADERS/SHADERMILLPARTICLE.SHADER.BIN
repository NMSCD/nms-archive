[[FX]]

sampler gDiffuseMap = sampler_state
{
	TexUnit = 0;
};

sampler gNormalMap = sampler_state
{
	TexUnit = 1;
};

sampler gNormal2Map = sampler_state
{
    TexUnit = 3;
};

sampler gDiffuse2Map = sampler_state
{
	TexUnit = 4;
};

sampler gMasksMap = sampler_state
{
	TexUnit = 5;
};

sampler gCausticMap = sampler_state
{
    TexUnit = 6;
};

sampler gCausticOffsetMap = sampler_state
{
    TexUnit = 7;
};

sampler gShadowMap = sampler_state
{
    TexUnit = 8;
};

sampler gCloudShadowMap = sampler_state
{
    TexUnit = 9;
};

sampler gHSVOverlay = sampler_state
{
    DefaultTexture = SHADER/MACROVARIATION.DDS;
    TexUnit = 10;
    Address = Wrap;
};

sampler gDiffEnvMap = sampler_state
{
    TexUnit = 11;
};

sampler gSpecEnvMap = sampler_state
{
    TexUnit = 12;
};


sampler gDiffEnvNearMap = sampler_state
{
    TexUnit = 13;
};

sampler gSpecEnvNearMap = sampler_state
{
    TexUnit = 14;
};

sampler gNoiseMap = sampler_state
{
    DefaultTexture = SHADER/CLOUDNOISE.DDS;
    TexUnit = 15;
    Address = Wrap;
};

sampler gPerlin3D = sampler_state
{
    DefaultTexture = SHADER/NOISEHALF.DDS;
    TexUnit = 16;
    Address = Wrap;
};

sampler gFadeNoiseMap = sampler_state
{
    DefaultTexture = SHADER/BLUENOISE.DDS;
    TexUnit = 17;
    Address = Wrap;
};

sampler gDepthBuffer = sampler_state
{
    Address = Clamp;
    TexUnit = 18;
};

sampler gBufferMap = sampler_state
{
    Address = Clamp;
    TexUnit = 19;
};

sampler gScatteringVolume3D = sampler_state
{
    TexUnit = 20;
    Address = Clamp;
};

sampler gHSVNormalOverlay = sampler_state
{
    DefaultTexture = SHADER/MACROVARIATION.NORMAL.DDS;
    TexUnit = 21;
    Address = Wrap;
};

sampler gAlphaMap = sampler_state
{
    Address = Clamp;
    Filter = Trilinear;
    MaxAnisotropy = 0;
    TexUnit = 2;
    DefaultTexture = COMMON/WHITE.DDS;
};

// Uniforms

float4 gUVScrollStepVec4    = {0.0, 0.0, 0.0, 0.0};
float4 gMultiTextureVec4    = {1.0, 0.0, 0.0, 0.0};
float4 gHeavyAirFadeOutVec4 = {1.0, 0.0, 0.0, 0.0};
float4 gPlanetPositionVec4  = {0.0, 0.0, 0.0, 0.0}; 
float4 gSunPositionVec4     = {1.0, 0.0, 1.0, 0.0};

// Lighting
float4 gProbeBlendDataVec4              = {0.0, 0.0, 0.0, 0.0};
float4 gProbeNearPosVec4                = {0.0, 0.0, 0.0, 0.0};
float4 gInverseWorldUpMatVec4           = {0.0, 0.0, 0.0, 0.0};

// Water
float4 gInverseWaterWorld0     = {0.0, 0.0, 0.0, 0.0};
float4 gInverseWaterWorld1     = {0.0, 0.0, 0.0, 0.0};
float4 gInverseWaterWorld2     = {0.0, 0.0, 0.0, 0.0};
float4 gInverseWaterWorld3     = {0.0, 0.0, 0.0, 0.0};
float4 gWaterAbsorptionVec4    = { 1.0, 0.0, 1.0, 0.0 };
float4 gWaterScatterVec4       = { 1.0, 0.0, 1.0, 0.0 };
float4 gWaterKFunctionVec4     = { 1.0, 0.0, 1.0, 0.0 };
float4 gWaterEmissionVec4      = { 1.0, 0.0, 1.0, 0.0 };
float4 gWaterCausticsColourVec4         = { 1.0, 0.0, 1.0, 0.0 };
float4 gWaterFogVec4           = { 1.0, 0.0, 1.0, 0.0 };

// ShaderMill

smcode TEST
{
    Flag         "Unlit"        = _F07_UNLIT;
    Flag         "Alpha_Cutout" = _F33_ALPHACUTOUT;

    InputVector  "UV_1"          = vec2 lTexCoords;
    InputVector  "Scale"         = float lfScale;
    InputVector  "Rotation"      = float lfRotation;
    InputVector  "TimeElapsed"   = float lfTimeElapsed;
    InputVector  "AnimFrame"     = float lfFrameNumber;
    InputVector  "GlobalTime"    = float lfSkGlobalTime;
    InputVector  "LocalPosition" = vec3 lvLocalPosition;
    InputVector  "SunPosition"    = vec3 lSkSunPositionVec3;
    InputVector  "NodePosition"   = vec3 lSkNodePositionVec3;
    InputVector  "PlanetPosition" = vec3 lSkPlanetPositionVec3;
    InputColour  "Colour"         = vec4 lFragmentColour;
    InputColour  "VertexColour"   = vec4 lVertexColour;

    InputTexture "Diffuse_1"    = sampler gDiffuseMap;
    InputTexture "Diffuse_2"    = sampler gDiffuse2Map;
    InputTexture "Normal"       = sampler gNormalMap;
    InputTexture "Noise"        = sampler gFadeNoiseMap;
    
    OutputColour "Colour"        = vec4 lFragmentColour;
    OutputColour "VertexColour"  = vec4 lVertexColour;
    OutputColour "Normal"        = vec3 lFragmentNormal;
    OutputVector "Scale"         = float lfOutScale;
    OutputVector "Rotation"      = float lfOutRotation;
    OutputVector "LocalPosition" = vec3 lvOutLocalPosition;
    OutputVector "Glow"          = float lfOutGlow;

    NeededFlag = lFragmentNormal _F03_NORMALMAP;
    NeededFlag = gDiffuse2Map D_SM_DIFFUSE2;
    NeededFlag = lfOutGlow _F34_GLOW;
    NeededFlag = lSkTangentSpaceMat D_SM_TRANSFORMS_NORMAL;
    NeededFlag = lSkInvTangentSpaceMat D_SM_TRANSFORMS_NORMAL;

    NeededFlag = lSkLocalBoundsMin   D_SM_OBJECT_DATA;
    NeededFlag = lSkLocalBoundsMax   D_SM_OBJECT_DATA;
    NeededFlag = lSkBoundsSize       D_SM_OBJECT_DATA;
}
 
// Contexts

context [ !MACOS !IOS !SWITCH ] TRANSLUCENT
{
    VertexShader = compile GLSL VS_TRANSLUCENT;
    PixelShader = compile GLSL FS_TRANSLUCENT;
    ShaderMillContext = TEST;
}

context TRANSLUCENT_SOFT
{
    VertexShader = compile GLSL VS_TRANSLUCENT;
    PixelShader = compile GLSL FS_TRANSLUCENT_SOFT;
    ShaderMillContext = TEST;
}

context TRNSLCNT_ADDITIVE
{
    VertexShader = compile GLSL VS_TRANSLUCENT;
    PixelShader = compile GLSL FS_TRANSLUCENT_SOFT_ADDITIVE;
    ShaderMillContext = TEST;
}

context LQ_TRNSLCNT_ADDITIVE
{
    VertexShader = compile GLSL VS_TRANSLUCENT;
    PixelShader = compile GLSL FS_TRANSLUCENT_SOFT_ADDITIVE_LOW_QUALITY;
    ShaderMillContext = TEST;
}

context HEAVYAIR_SOFT
{
    VertexShader = compile GLSL VS_HEAVYAIR_SOFT;
    PixelShader = compile GLSL FS_HEAVYAIR_SOFT;
    ShaderMillContext = TEST;
}

context HVR_ADDITIVE
{
    VertexShader = compile GLSL VS_HEAVYAIR_SOFT;
    PixelShader = compile GLSL FS_HEAVYAIR_SOFT_ADDITIVE;
    ShaderMillContext = TEST;
}

context LQ_HVR_ADDITIVE
{
    VertexShader = compile GLSL VS_HEAVYAIR_SOFT;
    PixelShader = compile GLSL FS_HEAVYAIR_SOFT_ADDITIVE_LOW_QUALITY;
    ShaderMillContext = TEST;
}

context [ IOS ] HEAVYAIR
{
	VertexShader = compile GLSL VS_HEAVYAIR;
	PixelShader = compile GLSL FS_HEAVYAIR;
}

context [ !MACOS !IOS !SWITCH ] HEAVYAIR_SOFT_NORM
{
	VertexShader = compile GLSL VS_HEAVYAIR_SOFT;
	PixelShader = compile GLSL FS_HEAVYAIR_SOFT_NORM;
}

[[VS_HEAVYAIR]]
// =================================================================================================
#define D_HEAVYAIR
#emit_smcode TEST
#include "ParticleVertex.shader.h"

[[FS_HEAVYAIR]]
// =================================================================================================
#define D_HEAVYAIR
#emit_smcode TEST
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_SOFT_NORM]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_HEAVYAIR
#define D_DEPTH_LINEAR_NORM
#emit_smcode TEST
#include "ParticleFragment.shader.h"

[[VS_TRANSLUCENT]]
// =================================================================================================
#emit_smcode TEST
#include "ParticleVertex.shader.h"

[[VS_HEAVYAIR_SOFT]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_HEAVYAIR
#emit_smcode TEST
#include "ParticleVertex.shader.h"

[[FS_TRANSLUCENT]]
// =================================================================================================
#emit_smcode TEST
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_SOFT]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ALPHA_PARTICLES
#emit_smcode TEST
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_SOFT_ADDITIVE]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#define D_FULL_RES_PARTICLES
#emit_smcode TEST
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_SOFT_ADDITIVE_LOW_QUALITY]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#emit_smcode TEST
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_SOFT]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_HEAVYAIR
#define D_ALPHA_PARTICLES
#emit_smcode TEST
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_SOFT_ADDITIVE]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#define D_HEAVYAIR
#define D_FULL_RES_PARTICLES
#emit_smcode TEST
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_SOFT_ADDITIVE_LOW_QUALITY]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#define D_HEAVYAIR
#emit_smcode TEST
#include "ParticleFragment.shader.h"

