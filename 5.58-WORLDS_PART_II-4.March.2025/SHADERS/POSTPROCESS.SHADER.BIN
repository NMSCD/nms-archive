[[FX]]

// -----------------------------------------------------------------------------------
// Samplers
// -----------------------------------------------------------------------------------

sampler gBufferMap = sampler_state
{
    Address = Clamp;
    TexUnit = 0;
};

sampler gBuffer1Map = sampler_state
{
    Address = Clamp;
    TexUnit = 1;
};

sampler gBuffer2Map = sampler_state
{
    Address = Clamp;
    TexUnit = 2;
};

sampler gBuffer3Map = sampler_state
{
    Address = Clamp;
    TexUnit = 3;
};

sampler gBuffer4Map = sampler_state
{
    Address = Clamp;
    TexUnit = 4;
};

sampler gBuffer5Map = sampler_state
{
    Address = Clamp;
    TexUnit = 5;
};

sampler gBuffer6Map = sampler_state
{
    Address = Clamp;
    TexUnit = 6;
};

sampler gBuffer7Map = sampler_state
{
    Address = Clamp;
    TexUnit = 7;
};

sampler gBuffer0iMap = sampler_state
{
    Address = Clamp;
    TexUnit = 8;
};

sampler gBuffer1iMap = sampler_state
{
    Address = Clamp;
    TexUnit = 9;
};

sampler gBuffer2iMap = sampler_state
{
    Address = Clamp;
    TexUnit = 10;
};

sampler gBuffer3iMap = sampler_state
{
    Address = Clamp;
    TexUnit = 10;
};

sampler gBuffer0uMap = sampler_state
{
    Address = Clamp;
    TexUnit = 12;
};

sampler gBuffer1uMap = sampler_state
{
    Address = Clamp;
    TexUnit = 13;
};

sampler gBuffer2uMap = sampler_state
{
    Address = Clamp;
    TexUnit = 14;
};

sampler gBuffer3uMap = sampler_state
{
    Address = Clamp;
    TexUnit = 15;
};

sampler gBuffer0MsMap = sampler_state
{
    TexUnit = 16;
};

sampler gBuffer1MsMap = sampler_state
{
    TexUnit = 17;
};

sampler gBuffer2MsMap = sampler_state
{
    TexUnit = 18;
};

sampler gBuffer3MsMap = sampler_state
{
    TexUnit = 19;
};

sampler gColourLUTBase = sampler_state
{
    Address = Clamp;
    TexUnit = 6;
};

sampler gColourLUTFar = sampler_state
{
    Address = Clamp;
    TexUnit = 7;
};

sampler gColourLUTStorm = sampler_state
{
    Address = Clamp;
    TexUnit = 8;
};

sampler gColourLUTEffect = sampler_state
{
    Address = Clamp;
    TexUnit = 9;
};

sampler gDiffEnvMap = sampler_state
{
    TexUnit = 10;
};

sampler gSpecEnvMap = sampler_state
{
    TexUnit = 11;
};

sampler gProbeCubemapFlat = sampler_state
{
    Address         = Clamp;
    TexUnit         = 5;
};

sampler gBilatRejectMap = sampler_state
{
    ImgUnit = 0;
};

sampler gDepthReprjFrwd = sampler_state
{
    ImgUnit = 1;
};

sampler gDepthReprjBkwd = sampler_state
{
    ImgUnit = 2;
};

sampler gCbMask = sampler_state
{
    ImgUnit = 3;
};

//TF_BEGIN
sampler gUIFullscreenEffect = sampler_state
{
    Address = Wrap;
    TexUnit = 10;
};

sampler gUIFullscreenNormal = sampler_state
{
    Address = Wrap;
    TexUnit = 11;
};

sampler gUIFullScreenRefraction = sampler_state
{
    Address = Wrap;
    TexUnit = 12;
};

sampler gUICamoEffect = sampler_state
{
    Address = Clamp;
    TexUnit = 13;
};

sampler gUICamoNormal = sampler_state
{
    Address = Clamp;
    TexUnit = 14;
};

sampler gStencilBuffer = sampler_state
{
    TexUnit = 15;
};

//TF_END

sampler gFSRLutL_U = sampler_state
{
    Address = Clamp;
    TexUnit = 20;
};

sampler gFSRLutL_V = sampler_state
{
    Address = Clamp;
    TexUnit = 21;
};

sampler gFSRLutR_U = sampler_state
{
    Address = Clamp;
    TexUnit = 22;
};

sampler gFSRLutR_V = sampler_state
{
    Address = Clamp;
    TexUnit = 23;
};

// -----------------------------------------------------------------------------------
// Uniforms
// -----------------------------------------------------------------------------------

float4 gColourLUTParamsVec4     = { 0.0, 0.0, 0.0, 0.0 };
float4 gColourLUTStrengthsVec4  = { 0.0, 0.0, 0.0, 0.0 };

float4 gHDRParamsVec4
	// a - Exposure (higher values make scene brighter)
	// b - Brightpass threshold (intensity where blooming begins)
	// c - BrightPass offset (smaller values produce stronger blooming) 
= {2, 0.6, 0.06, 0};

float4 gHDRParams2Vec4 = { 0, 0, 0, 0 };

float4 gAcesCurveParams;

float4 gDoFParamsVec4;

// Planet
float4 gPlanetPositionVec4              = {0.0, -1204.0, 0.0, 1204.0};
float4 gScanParamsPosVec4               = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg1Vec4              = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg2Vec4              = {0.0, 0.0, 0.0, 0.0};

float4 gLightOriginVec4                 = {0.0, 0.0, 0.0, 0.0}; 
float4 gSharpenStrength                 = {0.0, 0.0, 0.0, 0.0};

float4 gBlurParamsVec4                  = {0.0, 0.0, 0.0, 0.0};
float4 gCustomParamsVec4                = {0.0, 0.0, 0.0, 0.0};

// Light Shafts
float4 gSkyUpperParamsVec4;
float4 gLightShaftColourBottomVec4;
float4 gLightShaftColourTopVec4;

// Water
float4 gWaterFogVec4;
float4 gInverseWaterWorld0     = {0.0, 0.0, 0.0, 0.0};
float4 gInverseWaterWorld1     = {0.0, 0.0, 0.0, 0.0};
float4 gInverseWaterWorld2     = {0.0, 0.0, 0.0, 0.0};
float4 gInverseWaterWorld3     = {0.0, 0.0, 0.0, 0.0};

//TF_BEGIN
// UI/Screen effects
float4 gUIParamsVec4 = { 0.2, 0.3, 0.9, 0.01 };
float4 gUIDeformVec4 = { 0.0, 0.0, 0.0, 0.0 };
float4 gUIColourVec4 = { 0.0, 0.0, 0.0, 0.0 };
float4 gVignetteVec4 = { 0.2, 1.0, 0.0, 0.0 };
float4 gWashParamsVec4 = { 0.0, 1.0, 0.0, 0.0 };
float4 gUILowHealthVignetteVec4 = { 0.2, 1.0, 0.0, 0.0 };
float4 gCriticalHitPointsVec4 = { 0.0, 0.0, 0.0, 0.0 };
float4 gFrontendFlashColourVec4 = { 0.0, 0.0, 0.0, 0.0 };
float4 gUINoiseDistortionPhaseVec4 = { 0.0, 0.0, 0.0, 0.0 };
float4 gUINoiseDistortionStrengthVec4 = { 0.0, 0.0, 0.0, 0.0 };
//TF_END

// -----------------------------------------------------------------------------------
// Contexts
// -----------------------------------------------------------------------------------

context COPY
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY;
}

context [ !MACOS !IOS !SWITCH ] COPY_R_TO_ARGB
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_R_TO_ARGB;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_R_TO_ARGB;
}

context [ !MACOS !IOS !SWITCH ] CPY_R_TO_ARGB_FSR
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_R_TO_ARGB_FSR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_R_TO_ARGB_FSR;
}

context [ !MACOS !IOS !SWITCH ] COPY_R_TO_ARGB32
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_R_TO_ARGB32;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_R_TO_ARGB32;
}

context COPY_SRGB_TO_P3
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_sRGB_TO_P3;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_sRGB_TO_P3;
}

context [ !MACOS !IOS !SWITCH ] COPY_ADD
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_ADD;
}

context [ !MACOS !IOS !SWITCH ] COPY_BLEND
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_BLEND;
}

context [ !MACOS !IOS !SWITCH ] COPY_BLEND_DST
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_BLEND_DST;
}

context [ !MACOS !IOS !SWITCH ] COPY_MIP
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_MIP;
}

context [ !MACOS !IOS !SWITCH ] COPY_FLIP
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_FLIP;
}

context [ !MACOS !IOS !SWITCH ] COPY_MULADD
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_MULADD;
}

context COPYRGB_SETA
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPYRGB;
}

context DEPTH_CLEAR
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DEPTH_CLEAR;
}

context COPY_DEPTH
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_DEPTH;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_DEPTH;
}

context [ !MACOS !IOS !SWITCH ] COPY_DEPTH_MASKED
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_DEPTH_MASKED;
}

context [ !MACOS !IOS !SWITCH ] COPY_RGB2LUM_LINEAR
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_RGB_TO_LUMINANCE_LINEAR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_RGB_TO_LUMINANCE_LINEAR;
}

context [ !MACOS !IOS !SWITCH ] COPY_RGB2LUM_GAMMA
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_RGB_TO_LUMINANCE_GAMMA;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_RGB_TO_LUMINANCE_GAMMA;
}

context [ !MACOS !IOS !SWITCH ] COPY_RESOLVEFSR
{
    VertexShader    = compile GLSL VS_FSQUAD_FSRLUT;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_RESOLVEFSR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_RESOLVEFSR;
}

context [ !MACOS !IOS !SWITCH ] COPY_TOFSR
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_TOFSR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_TOFSR;
}

context COPY_NONZERO
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_COPY_NONZERO;
    ComputeShader   = compile GLSL FS_POSTPROCESS_COPY_NONZERO;
}

context DEPTH_REV2LIN
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_REVERSE_TO_LINEAR;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_REVERSE_TO_LINEAR;
}


context [ !MACOS !IOS !SWITCH ] DEPTH_LINNORM2REV
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_LINEARNORM_TO_REVERSE;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_LINEARNORM_TO_REVERSE;
}

context DEPTH_REV2LIN_LESS
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_REVERSE_TO_LINEAR_LESS;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_REVERSE_TO_LINEAR_LESS;
}

context [ !SWITCH ] DEPTH_REV2LIN_WLESS
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_REVERSE_TO_LINEAR_LESS_WATER_FRONT_FACE;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_REVERSE_TO_LINEAR_LESS_WATER_FRONT_FACE;
}

context [ SWITCH ] DEPTH_LIN_WLESS
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_LINEAR_LESS_WATER_FRONT_FACE;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_LINEAR_LESS_WATER_FRONT_FACE;
}

context [ !MACOS !IOS !SWITCH ] NORM_FROM_DEPTH
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_NORM_FROM_DEPTH;
}

context [ !IOS !SWITCH ] NFD_EDGE
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_NORM_FROM_DEPTH_WITH_EDGE_DETECTION;
}

context [ !MACOS !IOS !SWITCH ] EDGE
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_EDGE;
}

context DOWNSAMPLE_GBUFFERDEPTH
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_GBUFFERDEPTH;
    ComputeShader = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_GBUFFERDEPTH;
}

context DOWNSAMPLE_DEPTH
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTH;
    ComputeShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTH;
}

context [ !MACOS !IOS !SWITCH ] DOWNSMP_DEPTH_FSR
{
    VertexShader    = compile GLSL VS_FSQUAD_FSRLUT;
    PixelShader     = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTHFSR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTHFSR;
}

context [ MACOS IOS ] DOWNSMP_DEPTH_NORM
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTH_NORM;
    ComputeShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTH_NORM;
}


context DOWNSMP_DEPTH_SPREAD
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTH_SPREAD;
    ComputeShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTH_SPREAD;
}

context [ SWITCH MACOS IOS ] DD_SPREAD_DZM
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTH_SPREAD_WITH_DEPTH_ZERO_MASK;
    ComputeShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTH_SPREAD_WITH_DEPTH_ZERO_MASK;
}

context DOWNSAMPLE_DPTH_WTR
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTH_WATER;
    ComputeShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_DEPTH_WATER;
}

context DEPTH_REPRJ_FRWD
{
    VertexShader    = compile GLSL VS_FSQUAD_REPRJ_F;
    PixelShader     = compile GLSL FS_POSTPROCESS_DEPTH_REPRJ_FRWD;
}

context DEPTH_U_DOWN
{
    VertexShader    = compile GLSL VS_FSQUAD_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_DEPTH_U_DOWN;
}

context [ SWITCH ] DEPTH_I2F
{
    VertexShader    = compile GLSL VS_FSQUAD_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_DEPTH_I2F_SWITCH;
}

context [ !SWITCH ] DEPTH_I2F
{
    VertexShader    = compile GLSL VS_FSQUAD_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_DEPTH_I2F;
}

context PARTICLE_BLEND
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_PARTICLE_BLEND;
    ComputeShader   = compile GLSL FS_POSTPROCESS_PARTICLE_BLEND;
}

context [ !MACOS !IOS !SWITCH ] PARTICLE_POST_TAA
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_PARTICLE_POST_TAA;
    ComputeShader   = compile GLSL FS_POSTPROCESS_PARTICLE_POST_TAA;
}

context [ !SWITCH ] PARTICLE_CLEAR
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader  = compile GLSL FS_POSTPROCESS_PARTICLE_CLEAR;
}

context CLEAR
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_CLEAR;
}

context CLEAR_ZERO
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_CLEAR_ZERO;
}

context CLEAR_ONE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_CLEAR_ONE;
}

context BRIGHTPASS
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_BRIGHTPASS;
    ComputeShader   = compile GLSL FS_POSTPROCESS_BRIGHTPASS;
}

context BRIGHTPASS_NEW
{
    VertexShader    = compile GLSL VS_FSQUAD_FSRLUT;
    PixelShader     = compile GLSL FS_POSTPROCESS_BRIGHTPASS_NEW;
    ComputeShader   = compile GLSL FS_POSTPROCESS_BRIGHTPASS_ADD;
}

context [ !MACOS !IOS !SWITCH ] BRIGHTPASS_PROBE
{
    VertexShader    = compile GLSL VS_FSQUAD_PROBE;
    PixelShader     = compile GLSL FS_POSTPROCESS_BRIGHTPASS_PROBE;
}

context BRIGHTPASS_COPY
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_BRIGHTPASS_COPY;
}

context BRIGHTPASS_TEMPORAL
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_BRIGHTPASS_TEMPORAL;
    ComputeShader   = compile GLSL FS_POSTPROCESS_BRIGHTPASS_TEMPORAL;
}

context GUASS_SIMPLE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_SIMPLE;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_SIMPLE;
}

context GUASS_9
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_9TAP;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_9TAP;
}


context GUASS_9_ADD
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_9TAP;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_9TAP_ADD;
}

context GUASS_9_HALF
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_9TAP_HALF;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_9TAP_HALF;
}


context [ !MACOS !IOS !SWITCH ] GUASS_9_SQR
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_9TAP_SQR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_9TAP_SQR;
}

context [ !MACOS !IOS !SWITCH ] GUASS_9_SQR_ADD
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_9TAP_SQR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_9TAP_SQR_ADD;
}

context [ !MACOS !IOS !SWITCH ] GUASS_9_FLAT_CUBEMAP
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_9TAP_FLAT_CUBEMAP;
}

context GUASS_7
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_7TAP;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_7TAP;
}

context GUASS_7_HALF
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_7TAP_HALF;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_7TAP_HALF;
}

context GUASS_7_SQR
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_7TAP_SQR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_7TAP_SQR;
}

context [ !MACOS !IOS !SWITCH ] GUASS_6_SQR_R
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_6TAP_SQR_RESAMPLE;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_6TAP_SQR_RESAMPLE;
}



context [ !MACOS !IOS !SWITCH ] GUASS_7_SQR_ADD
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_7TAP_SQR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_7TAP_SQR_ADD;
}

context [ !MACOS !IOS !SWITCH ] GUASS_7_FLAT_CUBEMAP
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_7TAP_FLAT_CUBEMAP;
}

context [ !MACOS !IOS !SWITCH ] GUASS_5
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_5TAP;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_5TAP;
}

context GUASS_5_HALF
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_5TAP_HALF;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_5TAP_HALF;
}



context GUASS_5_SQR
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_5TAP_SQR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_5TAP_SQR;
}



context GUASS_5_SQR_ADD
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_5TAP_SQR;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GUASS_5TAP_SQR_ADD;
}





context [ !IOS !SWITCH ] GUASS_5_FLAT_CUBEMAP
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_GUASS_5TAP_FLAT_CUBEMAP;
}

context BLUR_KAWASE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_BLUR_KAWASE;
    ComputeShader   = compile GLSL FS_POSTPROCESS_BLUR_KAWASE;
}

context BLUR_KAWASE_ADD
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_BLUR_KAWASE;
    ComputeShader   = compile GLSL FS_POSTPROCESS_BLUR_KAWASE_ADD;
}

context BLUR_KAWASE_PRESERVE_ALPHA
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_BLUR_KAWASE_PRESERVE_ALPHA;
    ComputeShader   = compile GLSL FS_POSTPROCESS_BLUR_KAWASE_PRESERVE_ALPHA;
}

context [ !IOS !SWITCH ] RCRS
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_RANK_CONDITION_RANK_SELECTION;
    ComputeShader   = compile GLSL FS_POSTPROCESS_RANK_CONDITION_RANK_SELECTION;
}

context [ !MACOS !IOS !SWITCH ] ADDITION_2
{
	VertexShader = compile GLSL VS_FSQUAD;
	PixelShader  = compile GLSL FS_POSTPROCESS_ADDITION_2;
}

context [ !SWITCH ] ADDITION_4
{
	VertexShader = compile GLSL VS_FSQUAD;
	PixelShader  = compile GLSL FS_POSTPROCESS_ADDITION_4;
}

context COMBINE
{
	VertexShader = compile GLSL VS_FSQUAD_LUT;
	PixelShader  = compile GLSL FS_POSTPROCESS_COMBINE;
}

context [ !SWITCH ] COMBINE_NO_LUM
{
    VertexShader   = compile GLSL VS_FSQUAD_LUT;
    PixelShader    = compile GLSL FS_POSTPROCESS_COMBINE_NO_LUM;
	ComputeShader  = compile GLSL FS_POSTPROCESS_COMBINE_NO_LUM;

}

context COMBINEHDR
{
    VertexShader = compile GLSL VS_ACES_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_COMBINEHDR;
}
context [ !MACOS !IOS !SWITCH ] COMBINE_AND_COPY_DEPTH
{
	VertexShader = compile GLSL VS_FSQUAD_LUT;
	PixelShader = compile GLSL FS_POSTPROCESS_COMBINE_AND_COPY_DEPTH;
}

context [ !MACOS !IOS !SWITCH ] COMBINEHDR_AND_COPY_DEPTH
{
	VertexShader = compile GLSL VS_ACES_FSQUAD;
	PixelShader = compile GLSL FS_POSTPROCESS_COMBINEHDR_AND_COPY_DEPTH;
}

context [ !MACOS !IOS !SWITCH ] FSR2_CSTM_INPUTS
{
    VertexShader    = compile GLSL VS_FSQUAD_LUT;
    PixelShader     = compile GLSL FS_POSTPROCESS_FSR2_CUSTOM_INPUTS;
    ComputeShader   = compile GLSL FS_POSTPROCESS_FSR2_CUSTOM_INPUTS;
}

context FXAA
{
	VertexShader = compile GLSL VS_FSQUAD;
	PixelShader  = compile GLSL FS_POSTPROCESS_FXAA;
}

context GAMMACORRECT
{
    VertexShader    = compile GLSL VS_FSQUAD_LUT;
    PixelShader     = compile GLSL FS_POSTPROCESS_GAMMACORRECT;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GAMMACORRECT;
}

context GAMMACORRECT_UI
{
    VertexShader    = compile GLSL VS_FSQUAD_LUT;
    PixelShader     = compile GLSL FS_POSTPROCESS_GAMMACORRECT_UI;
    ComputeShader   = compile GLSL FS_POSTPROCESS_GAMMACORRECT_UI;
}

context DEGAMMA
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_DEGAMMA;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEGAMMA;
}

context [ !MACOS !IOS !SWITCH ] CLEAR_GBUFFER
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_CLEAR_GBUFFER;
}


context [ !MACOS !IOS !SWITCH ] BILATERAL_UPSAMPLE
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE;
	ComputeShader = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE;
}

context [ !MACOS !IOS !SWITCH ] BILATERAL_ADD_UPSAMPLE
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_ADD;
	ComputeShader = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_ADD;
}

context [ !SWITCH ] BILATERAL_BLEND_UPSAMPLE
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_BLEND;
	ComputeShader = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_BLEND;
}

context [ !SWITCH ] BLTRL_UPS_BL
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_DST;
	ComputeShader = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_DST;
}

context [ !SWITCH ] WTR_BLTRL_UPSMPL_BLND
{
	VertexShader  = compile GLSL VS_FSQUAD_WTR_BLTR;
	PixelShader   = compile GLSL FS_WATER_POSTPROCESS_BILATERAL_UPSAMPLE_BLEND;
	ComputeShader = compile GLSL FS_WATER_POSTPROCESS_BILATERAL_UPSAMPLE_BLEND;
}

context [ !SWITCH ] WTR_BLTRL_DST_BLND_UPSMPL
{
	VertexShader  = compile GLSL VS_FSQUAD_WTR_BLTR;
	PixelShader   = compile GLSL FS_WATER_POSTPROCESS_BILATERAL_UPSAMPLE_BLEND_DST;
	ComputeShader = compile GLSL FS_WATER_POSTPROCESS_BILATERAL_UPSAMPLE_BLEND_DST;
}

context [ SWITCH ] BILATERAL_RMAP_BLEND_UPSAMPLE
{
    VertexShader = compile GLSL VS_FSQUAD_RMAP;
    PixelShader = compile GLSL FS_POSTPROCESS_BILATERAL_UPSORMAP_BLEND;
    ComputeShader = compile GLSL FS_POSTPROCESS_BILATERAL_UPSORMAP_BLEND;
}

context [ !MACOS !IOS !SWITCH ] BILATERAL_REJECT
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_BILATERAL_REJECT;
}

context PART_UPSAMPLE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_PARTICLE;
    ComputeShader   = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_PARTICLE;
}

context [ !MACOS !IOS !SWITCH ] PART_UPSAMPLE_POST_TAA
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_PARTICLE_POST_TAA;
    ComputeShader   = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_PARTICLE_POST_TAA;
}

context [ SWITCH ] PT_BL_UPS_REACT
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE_PARTICLE_REACTIVE;
}

context [ !MACOS !IOS !SWITCH ] BILATERAL_REDONLY_UPSAMPLE
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_BILATERAL_REDONLY_UPSAMPLE;
    ComputeShader = compile GLSL FS_POSTPROCESS_BILATERAL_REDONLY_UPSAMPLE;
}

context [ !MACOS !IOS !SWITCH ] BILATERAL_SIMPLE_REDONLY_UPSAMPLE
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_BILATERAL_SIMPLE_REDONLY_UPSAMPLE;
    ComputeShader = compile GLSL FS_POSTPROCESS_BILATERAL_SIMPLE_REDONLY_UPSAMPLE;
}

context [ !MACOS !IOS !SWITCH ] SCREEN_BILATERAL_UP
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_SCREEN_BILATERAL_UPSAMPLE;
	ComputeShader = compile GLSL FS_POSTPROCESS_SCREEN_BILATERAL_UPSAMPLE;
}

context [ !SWITCH ] SCREEN_BLT_UP_ADD
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_SCREEN_BILATERAL_UPSAMPLE_ADD;
	ComputeShader = compile GLSL FS_POSTPROCESS_SCREEN_BILATERAL_UPSAMPLE_ADD;
}

context [ SWITCH IOS MACOS ] SCREEN_BLT_UP_WRMAP
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_SCREEN_BILATERAL_UPSWRMAP_ADD;
	ComputeShader = compile GLSL FS_POSTPROCESS_SCREEN_BILATERAL_UPSWRMAP_ADD;
}

context [ !SWITCH ] DEPTH_AWARE_H_GUASS
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_H_GUASS;
	ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_H_GUASS;
}

context [ !SWITCH ] DEPTH_AWARE_V_GUASS
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_V_GUASS;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_V_GUASS;
}

context [ !SWITCH ] DPTH_AWRE_H_GSS_INV
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_H_GUASS_INVERTED;
	ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_H_GUASS_INVERTED;
}

context [ !SWITCH ] DPTH_AWRE_V_GSS_INV
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_V_GUASS_INVERTED;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_V_GUASS_INVERTED;
}

context [ !MACOS !IOS !SWITCH ] DEPTH_AWARE_HM_GUASS
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_H_GUASS_MIP;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_H_GUASS_MIP;
}

context [ !MACOS !IOS !SWITCH ] DEPTH_AWARE_VM_GUASS
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_V_GUASS_MIP;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_V_GUASS_MIP;
}

context [ !SWITCH  ] DEPTH_AWARE_H_REDONLY_GUASS
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_H_REDONLY_GUASS;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_H_REDONLY_GUASS;
}

context [ !SWITCH ] DEPTH_AWARE_V_REDONLY_GUASS
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_V_REDONLY_GUASS;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_V_REDONLY_GUASS;
}

context [ !SWITCH ] DEPTH_AWARE_VGAUSS_SHAFT_APPLY
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_VGAUSS_SHAFT_APPLY;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWARE_VGAUSS_SHAFT_APPLY;
}

context [ !IOS ] DEPTH_AWALT_H_GUASS
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_DEPTH_AWALT_H_GUASS;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWALT_H_GUASS;
}

context [ !IOS ] DEPTH_AWALT_V_GUASS
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_DEPTH_AWALT_V_GUASS;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWALT_V_GUASS;
}

context [ !MACOS !IOS !SWITCH ] DEPTH_AWALT_H_REDONLY_GUASS
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_DEPTH_AWALT_H_REDONLY_GUASS;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWALT_H_REDONLY_GUASS;
}

context [ !MACOS !IOS !SWITCH ] DEPTH_AWALT_V_REDONLY_GUASS
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_DEPTH_AWALT_V_REDONLY_GUASS;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWALT_V_REDONLY_GUASS;
}

context [ SWITCH ] DEPTH_AWRGBAR_H_GUASS
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_DEPTH_AWRGBAR_H_GUASS;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWRGBAR_H_GUASS;
}

context [ SWITCH ] DEPTH_AWRGBAR_V_GUASS
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_DEPTH_AWRGBAR_V_GUASS;
    ComputeShader = compile GLSL FS_POSTPROCESS_DEPTH_AWRGBAR_V_GUASS;
}


context DOWNSAMPLE
{
	VertexShader  = compile GLSL VS_FSQUAD;
	PixelShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE;
	ComputeShader = compile GLSL FS_POSTPROCESS_DOWNSAMPLE;
}

context [ SWITCH IOS MACOS ] BLUR_RED_4X4
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader  = compile GLSL FS_POSTPROCESS_BLUR_RED_4X4;
    PixelShader  = compile GLSL FS_POSTPROCESS_BLUR_RED_4X4;
}

context [ !MACOS !IOS !SWITCH ] MBLUR
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONBLUR;
}

context [ !MACOS !IOS !SWITCH ] MBLUR_PASS2
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONBLUR_PASS2;
}

context MBLUR_LOW
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONBLUR_LOW;
}

context MBLUR_LOW_PASS2
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONBLUR_LOW_PASS2;
}

context MBLUR_HIGH
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONBLUR_HIGH;
    ComputeShader = compile GLSL FS_POSTPROCESS_MOTIONBLUR_HIGH;
}

context MBLUR_HIGH_PASS2
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONBLUR_HIGH_PASS2;
    ComputeShader = compile GLSL FS_POSTPROCESS_MOTIONBLUR_HIGH_PASS2;
}

context [ !SWITCH ] MBLUR_ULT
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONBLUR_ULTRA;
}

context [ !SWITCH ] MBLUR_ULT_PASS2
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONBLUR_ULTRA_PASS2;
}

context MOTIONDILATE_V
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_MOTIONDILATE_VERT;
    ComputeShader   = compile GLSL FS_POSTPROCESS_MOTIONDILATE_VERT;
}

context MOTIONDILATE_H
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_MOTIONDILATE_HORZ;
    ComputeShader   = compile GLSL FS_POSTPROCESS_MOTIONDILATE_HORZ;
}

context MOTIONRESOLVE
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONRESOLVE;
}

context [ !MACOS !IOS !SWITCH ] MOTION_X_GATHER
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_MOTION_X_GATHER;
}

context [ !MACOS !IOS !SWITCH ] MOTION_FRONT
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_MOTION_FRONT;
}

context [ !MACOS !IOS !SWITCH ] MOTION_UV2SCREEN
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_MOTION_UV2SCREEN;
}

context [ MACOS IOS ] MOTIONRES_CLIP
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONRESOLVE_CLIP;
}

context [ MACOS IOS ] MOTIONRES_TERR
{
    VertexShader = compile GLSL VS_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_MOTIONRESOLVE_TERR;
}

context [ !MACOS !IOS !SWITCH ] MOTIONRES_SIMPLE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_MOTIONRESOLVE_SIMPLE;
}

context [ !MACOS !IOS !SWITCH ] MOTIONRES_S_CAM
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_MOTIONRESOLVE_SIMPLE_FROM_CAMERA;
}

context [ !MACOS !IOS !SWITCH ] MOTIONRES_DILATED
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_MOTIONRESOLVE_DILATED;
}

context [ SWITCH ] MTN_RES_DLT_DRPJ
{
    VertexShader    = compile GLSL VS_FSQUAD_DEPTH_REPRJ_B;
    PixelShader     = compile GLSL FS_POSTPROCESS_MOTIONRESOLVE_DILATED_WITH_DEPTH_REPROJECTION;
}

context [ SWITCH ] DEPTH_B2F_INIT
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DEPTH_BACK_TO_FORWARD_INIT;
}

context [ !MACOS !IOS !SWITCH ] REPROJECT
{
    VertexShader    = compile GLSL VS_STAA_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_REPROJECT;
    ComputeShader   = compile GLSL FS_POSTPROCESS_REPROJECT;
}

context [ !MACOS !IOS !SWITCH ] TEMPORAL_FILTER
{
    VertexShader    = compile GLSL VS_STAA_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_TEMPORAL_FILTER;
    ComputeShader   = compile GLSL FS_POSTPROCESS_TEMPORAL_FILTER;
}

context [ !MACOS !IOS ] STAA_APPLY
{
    VertexShader = compile GLSL VS_STAA_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_STAA_APPLY;
    ComputeShader = compile GLSL FS_POSTPROCESS_STAA_APPLY;
}

context [ SWITCH ] STAA_ALWAYSCLIP
{
    VertexShader    = compile GLSL VS_STAA_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_STAA_APPLY_ALWAYSCLIP;
}

context [ !MACOS !IOS ] STAA_AC_NO_DILATE
{
    VertexShader    = compile GLSL VS_STAA_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_STAA_APPLY_AC_NO_DILATE;
    ComputeShader   = compile GLSL FS_POSTPROCESS_STAA_APPLY_AC_NO_DILATE;
}

context [ !MACOS !IOS !SWITCH ] STAA_LOW
{
    VertexShader    = compile GLSL VS_STAA_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_STAA_APPLY_LOW;
    ComputeShader   = compile GLSL FS_POSTPROCESS_STAA_APPLY_LOW;
}

context [ !MACOS !IOS ] STAA_APPLY_TEST
{
    VertexShader = compile GLSL VS_STAA_FSQUAD;
    PixelShader = compile GLSL FS_POSTPROCESS_STAA_APPLY_TEST;
}

context [ !MACOS !IOS !SWITCH ] CONVERTHDR
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_CONVERTHDR;
    ComputeShader   = compile GLSL FS_CONVERTHDR;
}

context [ !MACOS !IOS !SWITCH ] DEPTHMASK
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_DEPTHMASK;
}

context FFX_SUPER_RES
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_FFX_SUPER_RES;
    ComputeShader = compile GLSL FS_FFX_SUPER_RES;
}

context [ !MACOS !IOS !SWITCH ] PREP_UPS_4TAP_CATMULL_ROM
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_PREPARE_UPSAMPLE_4TAP_CATMULL_ROM;
    ComputeShader   = compile GLSL FS_PREPARE_UPSAMPLE_4TAP_CATMULL_ROM;
}

context [ !MACOS !IOS !SWITCH ] UPSAMPLE_4TAP_BICUBIC
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_UPSAMPLE_4TAP_BICUBIC;
    ComputeShader   = compile GLSL FS_UPSAMPLE_4TAP_BICUBIC;
}

context UPS_4TAP_BIC_DJ
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_UPSAMPLE_4TAP_BICUBIC_DEJITTERED;
    ComputeShader   = compile GLSL FS_UPSAMPLE_4TAP_BICUBIC_DEJITTERED;
}

context [ !MACOS !IOS !SWITCH ] UPSAMPLE_5TAP_BICUBIC
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_UPSAMPLE_5TAP_BICUBIC;
    ComputeShader   = compile GLSL FS_UPSAMPLE_5TAP_BICUBIC;
}

context [ SWITCH ] UPSAMPLE_4TAP_CATMULL_ROM
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_UPSAMPLE_4TAP_CATMULL_ROM;
    ComputeShader   = compile GLSL FS_UPSAMPLE_4TAP_CATMULL_ROM;
}

context [ SWITCH ] UPS_4TAP_CR_SHARPER
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_UPSAMPLE_4TAP_CATMULL_ROM_SHARPER;
    ComputeShader   = compile GLSL FS_UPSAMPLE_4TAP_CATMULL_ROM_SHARPER;
}

context [ !MACOS !IOS !SWITCH ] FLIP_AND_PACK
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_FLIP_AND_PACK;
    ComputeShader   = compile GLSL FS_FLIP_AND_PACK;
}

context [ !SWITCH ] FFX_RCASHARPEN
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_FFX_RCAS;
    ComputeShader   = compile GLSL FS_FFX_RCAS;
}

context [ SWITCH ] CAS
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_CAS;
}

context [ !SWITCH ] CAS32
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_CAS32;
    ComputeShader   = compile GLSL FS_CAS32;

}

context [ !MACOS !IOS !SWITCH ] SHARPEN
{
    VertexShader    = compile GLSL VS_SHARPEN;
    PixelShader     = compile GLSL FS_SHARPEN;
    ComputeShader   = compile GLSL FS_SHARPEN;
}

context [ !MACOS !IOS !SWITCH ] DOWNSAMPLE_FLPY
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_DOWNSAMPLE_FLPY;
    ComputeShader   = compile GLSL FS_DOWNSAMPLE_FLPY;
}

context BLOOM_RESOLVE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_BLOOM_RESOLVE;
    ComputeShader   = compile GLSL FS_BLOOM_RESOLVE;
}

context BLOOM_EXPOSURE
{
     VertexShader    = compile GLSL VS_FSQUAD;
     PixelShader     = compile GLSL FS_POSTPROCESS_BLOOM_EXPOSURE;
     ComputeShader   = compile GLSL FS_POSTPROCESS_BLOOM_EXPOSURE;
}

context [ !MACOS !IOS !SWITCH ] BLOOM_APPLY
{
     VertexShader    = compile GLSL VS_FSQUAD;
     PixelShader     = compile GLSL FS_POSTPROCESS_BLOOM_APPLY;
     ComputeShader   = compile GLSL FS_POSTPROCESS_BLOOM_APPLY;
}

context [ !MACOS !IOS !SWITCH ] BLOOM_APPLY_EXP
{
     VertexShader    = compile GLSL VS_FSQUAD;
     PixelShader     = compile GLSL FS_POSTPROCESS_BLOOM_APPLY_EXPOSED;
     ComputeShader   = compile GLSL FS_POSTPROCESS_BLOOM_APPLY_EXPOSED;
}

context [ !MACOS !IOS !SWITCH ] BLOOM_APPLY_TM
{
     VertexShader    = compile GLSL VS_FSQUAD;
     PixelShader     = compile GLSL FS_POSTPROCESS_BLOOM_APPLY_TONEMAPPED;
     ComputeShader   = compile GLSL FS_POSTPROCESS_BLOOM_APPLY_TONEMAPPED;
}

context [ !MACOS !IOS !SWITCH ] BLOOM_APPLY_TM_GT
{
     VertexShader    = compile GLSL VS_FSQUAD;
     PixelShader     = compile GLSL FS_POSTPROCESS_BLOOM_APPLY_TONEMAPPED_WITH_GAMUT_CONVERSION;
     ComputeShader   = compile GLSL FS_POSTPROCESS_BLOOM_APPLY_TONEMAPPED_WITH_GAMUT_CONVERSION;
}

context [ !MACOS !IOS !SWITCH ] BLOOM_APPLY_E_TM
{
     VertexShader    = compile GLSL VS_FSQUAD;
     PixelShader     = compile GLSL FS_POSTPROCESS_BLOOM_APPLY_EXPOSED_AND_TONEMAPPED;
     ComputeShader   = compile GLSL FS_POSTPROCESS_BLOOM_APPLY_EXPOSED_AND_TONEMAPPED;
}

context [ !MACOS !IOS !SWITCH ] FX_COMBINE
{
     VertexShader    = compile GLSL VS_FSQUAD_LUT;
     PixelShader     = compile GLSL FS_POSTPROCESS_FX_COMBINE;
     ComputeShader   = compile GLSL FS_POSTPROCESS_FX_COMBINE;
}

context [ !MACOS !IOS !SWITCH ] FX_COMBINE_GM
{
     VertexShader    = compile GLSL VS_FSQUAD_LUT;
     PixelShader     = compile GLSL FS_POSTPROCESS_FX_COMBINE_WITH_GAMMA;
     ComputeShader   = compile GLSL FS_POSTPROCESS_FX_COMBINE_WITH_GAMMA;
}

context [ !SWITCH ] FX_COMBINE_LITE
{
     VertexShader    = compile GLSL VS_FSQUAD_LUT;
     PixelShader     = compile GLSL FS_POSTPROCESS_FX_COMBINE_LITE;
     ComputeShader   = compile GLSL FS_POSTPROCESS_FX_COMBINE_LITE;
}

context [ !MACOS !IOS !SWITCH ] FX_COMBINE_LT_GM
{
     VertexShader    = compile GLSL VS_FSQUAD_LUT;
     PixelShader     = compile GLSL FS_POSTPROCESS_FX_COMBINE_LITE_WITH_GAMMA;
     ComputeShader   = compile GLSL FS_POSTPROCESS_FX_COMBINE_LITE_WITH_GAMMA;
}

context [ SWITCH ] FX_COMBINE_SWITCH
{
     VertexShader    = compile GLSL VS_FSQUAD_LUT;
     PixelShader     = compile GLSL FS_POSTPROCESS_FX_COMBINE_SWITCH;
     ComputeShader   = compile GLSL FS_POSTPROCESS_FX_COMBINE_SWITCH;
}

context [ SWITCH ] FX_COMBINE_SW_FSR2
{
     VertexShader    = compile GLSL VS_FSQUAD_LUT;
     PixelShader     = compile GLSL FS_POSTPROCESS_FX_COMBINE_SWITCH_FSR2;
     ComputeShader   = compile GLSL FS_POSTPROCESS_FX_COMBINE_SWITCH_FSR2;
}

context [ !IOS !SWITCH ] HIGH_Z 
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_HIGH_Z;
    ComputeShader   = compile GLSL FS_POSTPROCESS_HIGH_Z;
}

context [ !SWITCH ] LOW_Z 
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_LOW_Z;
}

context [ !MACOS !IOS !SWITCH ] HIGH_Z_MULTI_START
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_HIGH_Z_MULTI_START;
}

context [ !MACOS !IOS !SWITCH ] LOW_Z_MULTI_START
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_LOW_Z_MULTI_START;
}

context [ !MACOS !IOS !SWITCH ] MIN
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_MIN;
}

context [ SWITCH ] DEPTH_CLIP
{
    VertexShader    = compile GLSL VS_FSQUAD_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_DEPTH_CLIP;
}

context [ !IOS !SWITCH ] DEPTH_MASK
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DEPTH_MASK;
}

context [ !IOS !SWITCH ] DEPTH_MASK_LITE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DEPTH_MASK_LITE;
}

context [ !MACOS !IOS !SWITCH ] UPSCALE_MASK
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_UPSCALE_MASK;
}

context [ !MACOS !IOS !SWITCH ] DISOCCLUSION_MASK
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DISOCCLUSION_MASK;
}

context [ !MACOS !IOS !SWITCH ] DISOCCL_TEMPORAL
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_DISOCCLUSION_TEMPORAL;
}

context [ !MACOS !IOS !SWITCH ] SPEED_TEMPORAL
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_SPEED_TEMPORAL;
}

context [ !SWITCH ] FLAT2FACE_RT
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_FLAT_TO_FACE_RT;
}

context [ !SWITCH ] FLAT2FACE_PROBE
{
    VertexShader    = compile GLSL VS_FSQUAD_PROBE;
    PixelShader     = compile GLSL FS_POSTPROCESS_FLAT_TO_FACE_PROBE;
}

context [ !SWITCH ] FLAT2RT_COPY
{
    VertexShader    = compile GLSL VS_FSQUAD_PROBE;
    PixelShader     = compile GLSL FS_POSTPROCESS_FLAT_TO_RT_COPY;
}

context [ !IOS !SWITCH ] REFRACT
{
    VertexShader    = compile GLSL VS_FSQUAD_FSRLUT;
    PixelShader     = compile GLSL FS_POSTPROCESS_REFRACT;
}

context [ !IOS !SWITCH ] REFRACT_BEHIND
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_REFRACT_BEHIND;
}

context [ !MACOS !IOS !SWITCH ] REFRACT_DISTORT
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_REFRACT_DISTORT;
}

context [ !MACOS !IOS !SWITCH ] REFRACT_DIST_ADD
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_REFRACT_DISTORT_ADD;
}

context [ !MACOS !IOS !SWITCH ] FSR2_GENREACT
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_FSR2_GENREACT;
    ComputeShader   = compile GLSL FS_POSTPROCESS_FSR2_GENREACT;
}

context [ PROSPERO ] PSSR_GENREACT
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_PSSR_GENREACT;
    ComputeShader   = compile GLSL FS_POSTPROCESS_PSSR_GENREACT;
}

context [ SWITCH ] REACT_POST_OPAQUE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_REACT_POST_OPAQUE;
}

context [ SWITCH ] REACT_POST_BLEND
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_REACT_POST_BLEND;
}

context [ SWITCH ] REACT_POST_PART
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_REACT_POST_PARTICLES;
}

context [ !MACOS !IOS !SWITCH ] REACT_LUMA_PACK
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_REACT_LUMA_PACK;
}


context [ SWITCH ] REACT_GEN
{
    VertexShader    = compile GLSL VS_FSQUAD_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_REACT_GENERATE;
}

context [ !MACOS !IOS !SWITCH ] REACT_GEN_LUM_R
{
    VertexShader  = compile GLSL VS_FSQUAD_EXT;
    PixelShader   = compile GLSL FS_POSTPROCESS_REACT_GEN_LUM_R;
    ComputeShader = compile GLSL FS_POSTPROCESS_REACT_GEN_LUM_R;
}

context [ !MACOS !IOS !SWITCH ] REACT_GEN_LUM_G
{
    VertexShader  = compile GLSL VS_FSQUAD_EXT;
    PixelShader   = compile GLSL FS_POSTPROCESS_REACT_GEN_LUM_G;
    ComputeShader = compile GLSL FS_POSTPROCESS_REACT_GEN_LUM_G;
}

context [ !MACOS !IOS !SWITCH ] REACT_DOWN
{
    VertexShader  = compile GLSL VS_FSQUAD_EXT;
    PixelShader   = compile GLSL FS_POSTPROCESS_REACT_DOWN;
    ComputeShader = compile GLSL FS_POSTPROCESS_REACT_DOWN;
}

context [ !MACOS !IOS !SWITCH ] REACT_DETECT
{
    VertexShader  = compile GLSL VS_FSQUAD_EXT;
    PixelShader   = compile GLSL FS_POSTPROCESS_REACT_DETECT;
    ComputeShader = compile GLSL FS_POSTPROCESS_REACT_DETECT;
}

context [ !MACOS !IOS !SWITCH ] REACT_RESOLVE
{
    VertexShader  = compile GLSL VS_FSQUAD_EXT;
    PixelShader   = compile GLSL FS_POSTPROCESS_REACT_RESOLVE;
    ComputeShader = compile GLSL FS_POSTPROCESS_REACT_RESOLVE;
}

context [ SWITCH ] CB_RES_SCAT_EVEN
{
    VertexShader    = compile GLSL VS_FSQUAD_CB_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_RESOLVE_SCATTERING_EVEN;
}

context [ SWITCH ] CB_RES_SCAT_ODD
{
    VertexShader    = compile GLSL VS_FSQUAD_CB_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_RESOLVE_SCATTERING_ODD;
}

context [ !MACOS !IOS !SWITCH ] CB_RES_LS_EVEN
{
    VertexShader    = compile GLSL VS_FSQUAD_CB_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS_EVEN;
}

context [ !MACOS !IOS !SWITCH ] CB_RES_LS_ODD
{
    VertexShader    = compile GLSL VS_FSQUAD_CB_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS_ODD;
}

context [ SWITCH ] CB_RES_LS_RPJ_EVEN
{
    VertexShader    = compile GLSL VS_FSQUAD_CB_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS_REPROJECT_EVEN;
}

context [ SWITCH ] CB_RES_LS_RPJ_ODD
{
    VertexShader    = compile GLSL VS_FSQUAD_CB_UINT;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS_REPROJECT_ODD;
}

context [ PC ] CB_SAMPLE_POS_W
{
    VertexShader    = compile GLSL VS_FSQUAD_CB;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_SAMPLE_POSITION_WRITE;
}

context [ SWITCH ] CB_SAMPLE_POS_W
{
    VertexShader    = compile GLSL VS_FSQUAD_CB;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_SAMPLE_POSITION_WRITE;
}

context [ PC ] CB_SAMPLE_POS_R
{
    VertexShader    = compile GLSL VS_FSQUAD_CB;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_SAMPLE_POSITION_READ;
}

context [ SWITCH ] CB_SAMPLE_POS_R
{
    VertexShader    = compile GLSL VS_FSQUAD_CB;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_SAMPLE_POSITION_READ;
}

context [ SWITCH ] CB_REJECT_EVEN
{
    VertexShader    = compile GLSL VS_FSQUAD_CB;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_REJECT_EVEN;
}

context [ SWITCH ] CB_REJECT_ODD
{
    VertexShader    = compile GLSL VS_FSQUAD_CB;
    PixelShader     = compile GLSL FS_POSTPROCESS_CHECKERBOARD_REJECT_ODD;
}

context DUALP_PROJECT
{
    VertexShader    = compile GLSL VS_DUALP_PROJECT;
    PixelShader     = compile GLSL FS_DUALP_PROJECT;
}

//TF_BEGIN






context [ MACOS IOS ] BILAT_UPSMP_NDP
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE;
    ComputeShader   = compile GLSL FS_POSTPROCESS_BILATERAL_UPSAMPLE;
}





context [ !MACOS !IOS !SWITCH ] UPSAMPLE_DUAL_FILTER
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_UPSAMPLE_DUALFILTER;
    ComputeShader = compile GLSL FS_POSTPROCESS_UPSAMPLE_DUALFILTER;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_4_V
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_4_VERT;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_4_VERT;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_4_H
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_4_HORIZ;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_4_HORIZ;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_6_V
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_6_VERT;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_6_VERT;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_6_H
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_6_HORIZ;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_6_HORIZ;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_8_V
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_8_VERT;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_8_VERT;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_8_H
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_8_HORIZ;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_8_HORIZ;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_10_V
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_10_VERT;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_10_VERT;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_10_H
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_10_HORIZ;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_10_HORIZ;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_DJ_4_V
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_4_VERT;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_4_VERT;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_DJ_4_H
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_6_HORIZ;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_6_HORIZ;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_DJ_6_V
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_6_VERT;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_6_VERT;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_DJ_6_H
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_6_HORIZ;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_6_HORIZ;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_DJ_8_V
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_8_VERT;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_8_VERT;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_DJ_8_H
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_8_HORIZ;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_8_HORIZ;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_DJ_10_V
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_10_VERT;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_10_VERT;
}

context [ !MACOS !IOS !SWITCH ] SM_RSMP_DJ_10_H
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_10_HORIZ;
    ComputeShader = compile GLSL FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_10_HORIZ;
}

context DOWN_8TAP_W
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI;
    ComputeShader = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI;
}

context [ !MACOS !IOS !SWITCH ] DOWN_8TAP_W_R
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI_R;
    ComputeShader = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI_R;
}

context [ !MACOS !IOS !SWITCH ] DOWN_8TAP_W_RGB
{
    VertexShader  = compile GLSL VS_FSQUAD;
    PixelShader   = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI_RGB;
    ComputeShader = compile GLSL FS_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI_RGB;
}

[[VS_FSQUAD_FRWD]]
// =================================================================================================
#define D_TEX_QUAD
#define D_FORWARD
#define D_LUT
#define D_SCREENEFFECT
#define D_BLOOM
#define D_DOF
#include "ImmediateModeVertex.shader.h"

[[FS_RESOLVE_DEPTH]]
// =================================================================================================
#define D_RESOLVE_DEPTH
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FRWD]]
// =================================================================================================
#define D_POSTPROCESS_COMBINE
#define D_FORWARD
#define D_LUT
#define D_SCREENEFFECT
#define D_DEBANDFILTER
#define D_BLOOM
#define D_DOF
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BILATERAL_UPSAMPLE]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLOOM_EXPOSURE_FRWD]]
// =================================================================================================
#define D_POSTPROCESS_BLOOM_EXPOSURE
#define D_FORWARD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE_DEPTH_NORM]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_DEPTH
#define D_POSTPROCESS_DOWNSAMPLE_DEPTH_NORM
#include "Fullscreen/PostProcessFragment.shader.h"


[[FS_POSTPROCESS_DOWNSAMPLE_DEPTH_SPREAD]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_DEPTH_SPREAD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE_DEPTH_SPREAD_WITH_DEPTH_ZERO_MASK]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_DEPTH_SPREAD
#define D_DEPTH_ZERO_MASK
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE_DUALFILTER]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_DUALFILTER
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_UPSAMPLE_DUALFILTER]]
// =================================================================================================
#define D_POSTPROCESS_UPSAMPLE_DUALFILTER
#include "Fullscreen/PostProcessFragment.shader.h"
//TF_END

[[VS_FSQUAD]]
// =================================================================================================
#define D_TEX_QUAD
#include "ImmediateModeVertex.shader.h"



[[VS_FSQUAD_EXT]]
// =================================================================================================
#define D_EXTENDED_MAPS
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_DEPTH_REPRJ_B]]
// =================================================================================================
#define D_TEX_QUAD
#define D_DEPTH_REPRJ_BKWD_RW
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_CB]]
// =================================================================================================
#define D_TEX_QUAD
#define D_CHECKERBOARD
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_LUT]]
// =================================================================================================
#define D_TEX_QUAD
#define D_LUT
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_RMAP]]
// =================================================================================================
#define D_TEX_QUAD
#define D_BILATERAL_REJECTMAP
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_PROBE]]
// =================================================================================================
#define D_TEX_QUAD
#define D_REFLECTION_PROBE
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_FSRLUT]]
// =================================================================================================
#define D_TEX_QUAD
#define D_FSRLUT
#include "ImmediateModeVertex.shader.h"

[[VS_STAA_FSQUAD]]
// =================================================================================================
#define D_TEX_QUAD
#define D_STAA_INTERPS
#include "ImmediateModeVertex.shader.h"

[[VS_ACES_FSQUAD]]
// =================================================================================================
#define D_TEX_QUAD
#define D_ACES_PARAMS
#define D_LUT
#include "ImmediateModeVertex.shader.h"

[[VS_SHARPEN]]
// =================================================================================================
#define D_TEX_QUAD
#define D_SHARPEN
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_REPRJ_F]]
// =================================================================================================
#define D_TEX_QUAD
#define D_DEPTH_REPRJ_FRWD_RW
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_UINT]]
// =================================================================================================
#define D_TEX_QUAD
#define D_UINT_SAMPLERS
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_CB_UINT]]
// =================================================================================================
#define D_TEX_QUAD
#define D_CHECKERBOARD
#define D_UINT_SAMPLERS
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_INT]]
// =================================================================================================
#define D_TEX_QUAD
#define D_INT_SAMPLERS
#include "ImmediateModeVertex.shader.h"

[[VS_FSQUAD_WTR_BLTR]]
// =================================================================================================
#define D_TEX_QUAD
#define D_NO_UNDERWATER
#include "ImmediateModeVertex.shader.h"

[[FS_POSTPROCESS_COPY]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_R_TO_ARGB]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPY_R_TO_ARGB
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_R_TO_ARGB_FSR]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPY_R_TO_ARGB
#define D_POSTPROCESS_COPY_TOFSR
#include "Fullscreen/PostProcessFragment.shader.h"


[[FS_POSTPROCESS_COPY_R_TO_ARGB32]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPY_R_TO_ARGB
#define D_POSTPROCESS_COPY_R_TO_ARGB32
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_sRGB_TO_P3]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_CONVERT_SRGB_P3
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_ADD]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPY_ADD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_BLEND]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPY_BLEND
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_BLEND_DST]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPY_BLEND_DST
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_MIP]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPY_MIP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_FLIP]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPY_FLIP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_MULADD]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPY_MULADD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPYRGB]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPYRGBONLY

#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_CLEAR]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_CLEAR
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_DEPTH]]
// =================================================================================================
#define D_POSTPROCESS_COPY_DEPTH
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_DEPTH_MASKED]]
// =================================================================================================
#define D_POSTPROCESS_COPY_DEPTH
#define D_POSTPROCESS_COPY_DEPTH_MASKED
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_RGB_TO_LUMINANCE_LINEAR]]
// =================================================================================================
#define D_POSTPROCESS_COPY_RGB_TO_LUMINANCE
#define D_LINEAR
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_RGB_TO_LUMINANCE_GAMMA]]
// =================================================================================================
#define D_POSTPROCESS_COPY_RGB_TO_LUMINANCE
#define D_GAMMA
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_RESOLVEFSR]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_FSRLUT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_TOFSR]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_POSTPROCESS_COPY_TOFSR
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COPY_NONZERO]]
// =================================================================================================
#define D_POSTPROCESS_COPY
#define D_ONLY_NONZERO
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_REVERSE_TO_LINEAR]]
// =================================================================================================
#define D_POSTPROCESS_REVERSE_TO_LINEAR
#include "Fullscreen/PostProcessFragment.shader.h"


[[FS_POSTPROCESS_DEPTH_LINEARNORM_TO_REVERSE]]
// =================================================================================================
#define D_POSTPROCESS_LINEARNORM_TO_REVERSE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_REVERSE_TO_LINEAR_LESS]]
// =================================================================================================
#define D_POSTPROCESS_REVERSE_TO_LINEAR_LESS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_NORM_FROM_DEPTH]]
// =================================================================================================
#define D_POSTPROCESS_NORM_FROM_DEPTH
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_NORM_FROM_DEPTH_WITH_EDGE_DETECTION]]
// =================================================================================================
#define D_POSTPROCESS_NORM_FROM_DEPTH
#define D_EDGE_DETECTION
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_EDGE]]
// =================================================================================================
#define D_POSTPROCESS_EDGE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_REVERSE_TO_LINEAR_LESS_WATER_FRONT_FACE]]
// =================================================================================================
#define D_POSTPROCESS_REVERSE_TO_LINEAR
#define D_MESH_WATER_FRONT_FACE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_LINEAR_LESS_WATER_FRONT_FACE]]
// =================================================================================================
#define D_POSTPROCESS_REVERSE_TO_LINEAR
#define D_MESH_WATER_FRONT_FACE
#define D_LINEAR_DEPTH
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_FULLSCREEN_TO_CHECKERBOARD]]
// =================================================================================================
#define D_POSTPROCESS_FULLSCREEN_TO_CHECKERBOARD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE_GBUFFERDEPTH]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_GBUFFERDEPTH
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE_DEPTH]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_DEPTH
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE_DEPTHFSR]]
// =================================================================================================
#define D_FSRLUT
#define D_POSTPROCESS_DOWNSAMPLE_DEPTH
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE_DEPTH_WATER]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_DEPTH
#define D_POSTPROCESS_DOWNSAMPLE_DEPTH_WATER
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_REPRJ_FRWD]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_REPRJ_FRWD
#define D_DEPTH_REPRJ_FRWD_RW
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_U_DOWN]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_U_DOWN
#define D_UINT_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_I2F]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_I2F
#define D_UINT_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_I2F_SWITCH]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_I2F_SWITCH
#define D_UINT_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_TRANSPARENCIES_APPLY_BLENDED_ABOVE]]
// =================================================================================================
#define D_POSTPROCESS_TRANSPARENCIES_APPLY
#define D_BLENDED_ABOVE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_TRANSPARENCIES_APPLY_PARTICLES]]
// =================================================================================================
#define D_POSTPROCESS_TRANSPARENCIES_APPLY
#define D_PARTICLES
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_PARTICLE_BLEND]]
// =================================================================================================
#define D_POSTPROCESS_PARTICLE_BLEND
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_PARTICLE_CLEAR]]
// =================================================================================================
#define D_POSTPROCESS_PARTICLE_CLEAR
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CLEAR]]
// =================================================================================================
#define D_POSTPROCESS_CLEAR
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CLEAR_ZERO]]
// =================================================================================================
#define D_POSTPROCESS_CLEAR
#define D_POSTPROCESS_CLEAR_ZERO
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CLEAR_ONE]]
// =================================================================================================
#define D_POSTPROCESS_CLEAR
#define D_POSTPROCESS_CLEAR_ONE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_PARTICLE_POST_TAA]]
// =================================================================================================
#define D_POSTPROCESS_PARTICLE_BLEND
#define D_BLEND_POST_TAA
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BRIGHTPASS]]
// =================================================================================================
#define D_POSTPROCESS_BRIGHTPASS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BRIGHTPASS_COPY]]
// =================================================================================================
#define D_POSTPROCESS_BRIGHTPASS_COPY
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLUR_KAWASE]]
// =================================================================================================
#define D_POSTPROCESS_BLUR_KAWASE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLUR_KAWASE_ADD]]
// =================================================================================================
#define D_POSTPROCESS_BLUR_KAWASE
#define D_BLUR_KAWASE_ADD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLUR_KAWASE_PRESERVE_ALPHA]]
// =================================================================================================
#define D_POSTPROCESS_BLUR_KAWASE_PRESERVE_ALPHA
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_RANK_CONDITION_RANK_SELECTION]]
// =================================================================================================
#define D_POSTPROCESS_RANK_CONDITION_RANK_SELECTION
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_SIMPLE]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_SIMPLE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_9TAP]]
// =================================================================================================
#define D_POSTPROCESS_GUASS
#define D_GUASS_BLUR_RADIUS_4
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"


[[FS_POSTPROCESS_GUASS_9TAP_ADD]]
// =================================================================================================
#define D_POSTPROCESS_GUASS
#define D_GUASS_BLUR_RADIUS_4
#define D_GUASS_BLUR_ADD
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_9TAP_HALF]]
// =================================================================================================
#define D_POSTPROCESS_GUASS
#define D_GUASS_BLUR_RADIUS_4
#define D_GUASS_BLUR_HALF
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"


[[FS_POSTPROCESS_GUASS_9TAP_SQR]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_SQUARE
#define D_GUASS_BLUR_RADIUS_4
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_9TAP_SQR_ADD]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_SQUARE
#define D_GUASS_BLUR_RADIUS_4
#define D_GUASS_BLUR_ADD
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_9TAP_FLAT_CUBEMAP]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_FLAT_CUBEMAP
#define D_GUASS_BLUR_RADIUS_4
#define D_USES_COMMON_CUBEMAP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_7TAP]]
// =================================================================================================
#define D_POSTPROCESS_GUASS
#define D_GUASS_BLUR_RADIUS_3
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_7TAP_HALF]]
// =================================================================================================
#define D_POSTPROCESS_GUASS
#define D_GUASS_BLUR_RADIUS_3
#define D_GUASS_BLUR_HALF
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_6TAP_SQR_RESAMPLE]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_RESAMPLE
#define D_GUASS_SQUARE
#define D_GUASS_RESAMPLE_BLUR_RADIUS    3
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_7TAP_SQR]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_SQUARE
#define D_GUASS_BLUR_RADIUS_3
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_7TAP_SQR_ADD]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_SQUARE
#define D_GUASS_BLUR_RADIUS_3
#define D_GUASS_BLUR_ADD
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_7TAP_FLAT_CUBEMAP]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_FLAT_CUBEMAP
#define D_GUASS_BLUR_RADIUS_3
#define D_USES_COMMON_CUBEMAP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_5TAP]]
// =================================================================================================
#define D_POSTPROCESS_GUASS
#define D_GUASS_BLUR_RADIUS_2
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_5TAP_HALF]]
// =================================================================================================
#define D_POSTPROCESS_GUASS
#define D_GUASS_BLUR_RADIUS_2
#define D_GUASS_BLUR_HALF
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_5TAP_SQR]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_SQUARE
#define D_GUASS_BLUR_RADIUS_2
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_5TAP_SQR_ADD]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_SQUARE
#define D_GUASS_BLUR_RADIUS_2
#define D_GUASS_BLUR_ADD
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_5TAP_FLAT_CUBEMAP]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_FLAT_CUBEMAP
#define D_GUASS_BLUR_RADIUS_2
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define D_USES_COMMON_CUBEMAP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_DEPTH_9TAP]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_DEPTH
#define D_GUASS_BLUR_RADIUS_4
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_DEPTH_7TAP]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_DEPTH
#define D_GUASS_BLUR_RADIUS_3
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GUASS_DEPTH_5TAP]]
// =================================================================================================
#define D_POSTPROCESS_GUASS_DEPTH
#define D_GUASS_BLUR_RADIUS_2
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_ADDITION_2]]
// =================================================================================================
#define D_POSTPROCESS_ADDITION_2
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_ADDITION_4]]
// =================================================================================================
#define D_POSTPROCESS_ADDITION_4
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COMBINE]]
// =================================================================================================
#define D_POSTPROCESS_COMBINE
#define D_LUT
#define D_OUTPUT_LUMINANCE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COMBINE_NO_LUM]]
// =================================================================================================
#define D_POSTPROCESS_COMBINE
#define D_LUT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COMBINEHDR]]
// =================================================================================================
#define D_POSTPROCESS_COMBINEHDR
#define D_LUT
#define D_ACES_PARAMS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COMBINE_AND_COPY_DEPTH]]
// =================================================================================================
#define D_POSTPROCESS_COMBINE_AND_COPY_DEPTH
#define D_LUT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_COMBINEHDR_AND_COPY_DEPTH]]
// =================================================================================================
#define D_POSTPROCESS_COMBINEHDR_AND_COPY_DEPTH
#define D_LUT
#define D_ACES_PARAMS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FSR2_CUSTOM_INPUTS]]
// =================================================================================================
#define D_POSTPROCESS_FSR2_CUSTOM_INPUTS
#define D_LUT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GAMMACORRECT]]
// =================================================================================================
#define D_POSTPROCESS_GAMMACORRECT
#define D_LUT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_GAMMACORRECT_UI]]
// =================================================================================================
#define D_POSTPROCESS_GAMMACORRECT_UI
#define D_LUT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEGAMMA]]
// =================================================================================================
#define D_POSTPROCESS_DEGAMMA
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CLEAR_GBUFFER]]
// =================================================================================================
#define D_ATTRIBUTES
#define D_POSTPROCESS_CLEAR_GBUFFER
#include "Fullscreen/PostProcessFragment.shader.h"


[[FS_POSTPROCESS_BILATERAL_UPSAMPLE]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BILATERAL_UPSAMPLE_DST]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_DST
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BILATERAL_UPSAMPLE_ADD]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_ADD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BILATERAL_UPSAMPLE_BLEND]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_BLEND
#include "Fullscreen/PostProcessFragment.shader.h"


[[FS_WATER_POSTPROCESS_BILATERAL_UPSAMPLE_BLEND]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_BLEND
#define D_NO_UNDERWATER
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_WATER_POSTPROCESS_BILATERAL_UPSAMPLE_BLEND_DST]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_DST
#define D_NO_UNDERWATER
#include "Fullscreen/PostProcessFragment.shader.h"


[[FS_POSTPROCESS_BILATERAL_UPSORMAP_BLEND]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_BLEND
#define D_BILATERAL_REJECTMAP
#define D_POSTPROCESS_BILATERAL_OUTPUT_RMAP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BILATERAL_REJECT]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_REJECT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BILATERAL_UPSAMPLE_PARTICLE]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_BLEND
#define D_PARTICLE_BLEND
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BILATERAL_UPSAMPLE_PARTICLE_REACTIVE]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE_PARTICLE_REACTIVE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BILATERAL_UPSAMPLE_PARTICLE_POST_TAA]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_BLEND
#define D_PARTICLE_BLEND
#define D_BLEND_POST_TAA
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BILATERAL_REDONLY_UPSAMPLE]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_POSTPROCESS_BILATERAL_REDONLY
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BILATERAL_SIMPLE_REDONLY_UPSAMPLE]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_POSTPROCESS_BILATERAL_REDONLY
#define D_POSTPROCESS_BILATERAL_SIMPLE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SCREEN_BILATERAL_UPSAMPLE]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_SCREEN
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SCREEN_BILATERAL_UPSAMPLE_ADD]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_SCREEN
#define D_BLEND_ADD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SCREEN_BILATERAL_UPSWRMAP_ADD]]
// =================================================================================================
#define D_POSTPROCESS_BILATERAL_UPSAMPLE
#define D_BLEND_SCREEN
#define D_BLEND_ADD
#define D_POSTPROCESS_BILATERAL_WITH_RMAP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWARE_H_GUASS]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_H_GUASS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWARE_V_GUASS]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_V_GUASS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWARE_H_GUASS_INVERTED]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_H_GUASS
#define D_COMPARE_ONE_OVER_DEPTH
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWARE_V_GUASS_INVERTED]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_V_GUASS
#define D_COMPARE_ONE_OVER_DEPTH
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWARE_H_GUASS_MIP]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_H_GUASS
#define D_MIP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWARE_V_GUASS_MIP]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_V_GUASS
#define D_MIP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWARE_H_REDONLY_GUASS]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_H_GUASS
#define D_POSTPROCESS_DEPTH_AWARE_REDONLY
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWARE_V_REDONLY_GUASS]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_V_GUASS
#define D_POSTPROCESS_DEPTH_AWARE_REDONLY
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWARE_VGAUSS_SHAFT_APPLY]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_V_GUASS
#define D_APPLY_LIGHTSHAFT_COLOUR
#define D_BLEND_ADD_PREMUL_DST
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWALT_H_GUASS]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_H_GUASS
#define D_POSTPROCESS_DEPTH_AWARE_LITE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWALT_V_GUASS]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_V_GUASS
#define D_POSTPROCESS_DEPTH_AWARE_LITE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWALT_H_REDONLY_GUASS]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_H_GUASS
#define D_POSTPROCESS_DEPTH_AWARE_REDONLY
#define D_POSTPROCESS_DEPTH_AWARE_LITE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWALT_V_REDONLY_GUASS]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_V_GUASS
#define D_POSTPROCESS_DEPTH_AWARE_REDONLY
#define D_POSTPROCESS_DEPTH_AWARE_LITE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWRGBAR_H_GUASS]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_H_GUASS
#define D_POSTPROCESS_DEPTH_AWARE_LITE
#define D_POSTPROCESS_DEPTH_AWARE_RGBAR
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_AWRGBAR_V_GUASS]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_AWARE_V_GUASS
#define D_POSTPROCESS_DEPTH_AWARE_LITE
#define D_POSTPROCESS_DEPTH_AWARE_RGBAR
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONBLUR_CATEG]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONBLUR
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_MBLUR_DISCARD_IF_DOING_ANYTHING
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLUR_RED_4X4]]
// =================================================================================================
#define D_POSTPROCESS_BLUR_RED_4X4
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONBLUR]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONBLUR
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_MOTIONBLUR_JITTER
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONBLUR_LOW]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONBLUR
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_MOTIONBLUR_SAMPLE_COUNT_LOW
#define D_MOTIONBLUR_FILTER_TEXTURE_READS
#define D_MBLUR_DOWNRES_MODE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONBLUR_HIGH]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONBLUR
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_MOTIONBLUR_SAMPLE_COUNT_MED
#define D_MOTIONBLUR_MULTIDIR_SAMPLES
#define D_MOTIONBLUR_FILTER_TEXTURE_READS
#define D_MBLUR_DISCARD_IF_DOING_NOTHING
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONBLUR_ULTRA]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONBLUR
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_MOTIONBLUR_SAMPLE_COUNT_ULTRA
#define D_MOTIONBLUR_MULTIDIR_SAMPLES
#define D_MOTIONBLUR_FILTER_TEXTURE_READS
#define D_MOTIONBLUR_ALWAYS_MULTIDIR
#define D_MBLUR_DISCARD_IF_DOING_NOTHING
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONBLUR_PASS2]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONBLUR
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_MOTIONBLUR_JITTER
#define D_PASS_2
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONBLUR_LOW_PASS2]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONBLUR
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_MOTIONBLUR_SAMPLE_COUNT_LOW
#define D_MOTIONBLUR_FILTER_TEXTURE_READS
#define D_PASS_2
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONBLUR_HIGH_PASS2]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONBLUR
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_MOTIONBLUR_SAMPLE_COUNT_MED
#define D_MOTIONBLUR_MULTIDIR_SAMPLES
#define D_MOTIONBLUR_FILTER_TEXTURE_READS
#define D_PASS_2
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONBLUR_ULTRA_PASS2]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONBLUR
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_MOTIONBLUR_SAMPLE_COUNT_ULTRA
#define D_MOTIONBLUR_MULTIDIR_SAMPLES
#define D_MOTIONBLUR_FILTER_TEXTURE_READS
#define D_MOTIONBLUR_ALWAYS_MULTIDIR
#define D_PASS_2
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONDILATE_HORZ]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONDILATE_PASS1
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_DILATE_HORZ
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONDILATE_VERT]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONDILATE_PASS2
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_DILATE_VERT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONRESOLVE]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONRESOLVE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTION_X_GATHER]]
// =================================================================================================
#define D_POSTPROCESS_MOTION_X_GATHER
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTION_FRONT]]
// =================================================================================================
#define D_POSTPROCESS_MOTION_FRONT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTION_UV2SCREEN]]
// =================================================================================================
#define D_POSTPROCESS_MOTION_UV2SCREEN
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONRESOLVE_CLIP]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONRESOLVE
#define D_WRITE_WANTS_CLIP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONRESOLVE_TERR]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONRESOLVE
#define D_WRITE_IS_TERRAIN
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONRESOLVE_SIMPLE]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONRESOLVE_SIMPLE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONRESOLVE_SIMPLE_FROM_CAMERA]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONRESOLVE_SIMPLE
#define D_MOTION_FROM_CAMERA
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONRESOLVE_DILATED]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONRESOLVE_DILATED
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_MOTIONRESOLVE_DILATED_WITH_DEPTH_REPROJECTION]]
// =================================================================================================
#define D_POSTPROCESS_MOTIONRESOLVE_DILATED
#define D_DEPTH_REPRJ_BKWD_RW
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_BACK_TO_FORWARD_INIT]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_BACK_TO_FORWARD_INIT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REPROJECT]]
// =================================================================================================
#define D_POSTPROCESS_REPROJECT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_TEMPORAL_FILTER]]
// =================================================================================================
#define D_POSTPROCESS_TEMPORAL_FILTER
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_STAA_APPLY]]
// =================================================================================================
#define D_POSTPROCESS_STAA_APPLY
#define D_TAA_RENDER_TARGETS
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_STAA_APPLY_ALWAYSCLIP]]
// =================================================================================================
#define D_POSTPROCESS_STAA_APPLY
#define D_TAA_RENDER_TARGETS
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_ALWAYS_COLOUR_CLIP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_STAA_APPLY_AC_NO_DILATE]]
// =================================================================================================
#define D_POSTPROCESS_STAA_APPLY
#define D_TAA_RENDER_TARGETS
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_NO_MOTION_DILATE
#define D_NO_MOTION_DILATE_BUFF
#define D_ALWAYS_COLOUR_CLIP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_STAA_APPLY_LOW]]
// =================================================================================================
#define D_POSTPROCESS_STAA_APPLY
#define D_TAA_RENDER_TARGETS
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#define D_ALWAYS_COLOUR_CLIP
#define D_NO_MOTION_DILATE
#define D_NO_BACKBUFFER
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_STAA_APPLY_TEST]]
// =================================================================================================
#define D_POSTPROCESS_STAA_APPLY
#define D_TAA_RENDER_TARGETS
#define D_SPLITSCREEN_TEST
#define D_MOTION_VECTORS_ALREADY_RESOLVED
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_STAA_COPY]]
// =================================================================================================
#define D_POSTPROCESS_STAA_COPY
#define D_TAA_RENDER_TARGETS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEJITTER]]
// =================================================================================================
#define D_POSTPROCESS_DEJITTER
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FXAA]]
// =================================================================================================
#include "Fullscreen/FxaaFragment.shader.h"

[[FS_CONVERTHDR]]
// =================================================================================================
#define D_POSTPROCESS_CONVERTHDR
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_DEPTHMASK]]
// =================================================================================================
#define D_POSTPROCESS_DEPTHMASK
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_FFX_SUPER_RES]]
// =================================================================================================
// =================================================================================================
#define D_POSTPROCESS_FFX_SUPER_RES
#include "Fullscreen/FidelityFXSuperResFragment.shader.h"

[[FS_FFX_RCAS]]
// =================================================================================================
#define D_POSTPROCESS_FFX_RCASHARPEN
#include "Fullscreen/FidelityFXSuperResFragment.shader.h"

[[FS_CAS]]
// =================================================================================================
#define D_POSTPROCESS_CAS
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_CAS32]]
// =================================================================================================
#define D_POSTPROCESS_CAS32
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_SHARPEN]]
// =================================================================================================
#define D_POSTPROCESS_SHARPEN
#define D_SHARPEN
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_PREPARE_UPSAMPLE_4TAP_CATMULL_ROM]]
// =================================================================================================
#define D_POSTPROCESS_PREPARE_UPSAMPLE_4TAP_CATMULL_ROM
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_UPSAMPLE_4TAP_BICUBIC]]
// =================================================================================================
#define D_POSTPROCESS_UPSAMPLE_4TAP_BICUBIC
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_UPSAMPLE_4TAP_BICUBIC_DEJITTERED]]
// =================================================================================================
#define D_POSTPROCESS_UPSAMPLE_4TAP_BICUBIC
#define D_POSTPROCESS_UPSAMPLE_4TAP_BICUBIC_DEJITTERED
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_UPSAMPLE_5TAP_BICUBIC]]
// =================================================================================================
#define D_POSTPROCESS_UPSAMPLE_5TAP_BICUBIC
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_UPSAMPLE_4TAP_CATMULL_ROM]]
// =================================================================================================
#define D_POSTPROCESS_UPSAMPLE_4TAP_CATMULL_ROM
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"



[[FS_UPSAMPLE_4TAP_CATMULL_ROM_SHARPER]]
// =================================================================================================
#define D_POSTPROCESS_UPSAMPLE_4TAP_CATMULL_ROM
#define D_POSTPROCESS_UPSAMPLE_4TAP_CATMULL_ROM_SHARPER
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_FLIP_AND_PACK]]
// =================================================================================================
#define D_POSTPROCESS_FLIP_AND_PACK
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_DOWNSAMPLE_FLPY]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_FLPY
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_BLOOM_RESOLVE]]
// =================================================================================================
#define D_BLOOM_RESOLVE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BRIGHTPASS_NEW]]
// =================================================================================================
#define D_FSRLUT
#define D_POSTPROCESS_BRIGHTPASS_NEW
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BRIGHTPASS_ADD]]
// =================================================================================================
#define D_FSRLUT
#define D_POSTPROCESS_BRIGHTPASS_NEW
#define D_ADD_IN_COMPUTE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BRIGHTPASS_PROBE]]
// =================================================================================================
#define D_POSTPROCESS_BRIGHTPASS_NEW
#define D_REFLECTION_PROBE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BRIGHTPASS_TEMPORAL]]
// =================================================================================================
#define D_FSRLUT
#define D_POSTPROCESS_BRIGHTPASS_TEMPORAL
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLOOM_EXPOSURE]]
// =================================================================================================
#define D_POSTPROCESS_BLOOM_EXPOSURE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLOOM_APPLY]]
// =================================================================================================
#define D_POSTPROCESS_BLOOM_APPLY
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLOOM_APPLY_EXPOSED]]
// =================================================================================================
#define D_POSTPROCESS_BLOOM_APPLY
#define D_EXPOSURE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLOOM_APPLY_TONEMAPPED]]
// =================================================================================================
#define D_POSTPROCESS_BLOOM_APPLY
#define D_TONEMAP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLOOM_APPLY_TONEMAPPED_WITH_GAMUT_CONVERSION]]
// =================================================================================================
#define D_POSTPROCESS_BLOOM_APPLY
#define D_TONEMAP
#define D_CONVERT_GAMUT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_BLOOM_APPLY_EXPOSED_AND_TONEMAPPED]]
// =================================================================================================
#define D_POSTPROCESS_BLOOM_APPLY
#define D_TONEMAP
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FX_COMBINE]]
// =================================================================================================
#define D_POSTPROCESS_FX_COMBINE
#define D_DEBANDFILTER
#define D_LENS_FLARE
#define D_BLOOM_EXP
#define D_LUT
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FX_COMBINE_WITH_GAMMA]]
// =================================================================================================
#define D_POSTPROCESS_FX_COMBINE
#define D_DEBANDFILTER
#define D_LENS_FLARE
#define D_BLOOM_EXP
#define D_LUT
#define D_GAMMA
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FX_COMBINE_LITE]]
// =================================================================================================
#define D_POSTPROCESS_FX_COMBINE
#define D_BLOOM_EXP
#define D_LUT
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FX_COMBINE_LITE_WITH_GAMMA]]
// =================================================================================================
#define D_POSTPROCESS_FX_COMBINE
#define D_BLOOM_EXP
#define D_LUT
#define D_GAMMA
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FX_COMBINE_SWITCH]]
// =================================================================================================
#define D_POSTPROCESS_FX_COMBINE
#define D_LUT
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FX_COMBINE_SWITCH_FSR2]]
// =================================================================================================
#define D_POSTPROCESS_FX_COMBINE
#define D_LUT
#define D_FSR2_PREPARE_INPUTS
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_HIGH_Z]]
// =================================================================================================
#define D_POSTPROCESS_HIGH_Z
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_LOW_Z]]
// =================================================================================================
#define D_POSTPROCESS_LOW_Z
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_HIGH_Z_MULTI_START]]
// =================================================================================================
#define D_POSTPROCESS_HIGH_Z_MULTI_START
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_LOW_Z_MULTI_START]]
// =================================================================================================
#define D_POSTPROCESS_LOW_Z_MULTI_START
#include "Fullscreen/PostProcessFragment.shader.h"


[[FS_POSTPROCESS_MIN]]
// =================================================================================================
#define D_POSTPROCESS_MIN
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_CLIP]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_CLIP
#define D_UINT_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_MASK]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_MASK
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DEPTH_MASK_LITE]]
// =================================================================================================
#define D_POSTPROCESS_DEPTH_MASK
#define D_LITE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_UPSCALE_MASK]]
// =================================================================================================
#define D_POSTPROCESS_UPSCALE_MASK
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DISOCCLUSION_MASK]]
// =================================================================================================
#define D_POSTPROCESS_DISOCCLUSION_MASK
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DISOCCLUSION_TEMPORAL]]
// =================================================================================================
#define D_POSTPROCESS_DISOCCLUSION_TEMPORAL
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SPEED_TEMPORAL]]
// =================================================================================================
#define D_POSTPROCESS_SPEED_TEMPORAL
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FLAT_TO_FACE_RT]]
// =================================================================================================
#define D_POSTPROCESS_FLAT_TO_FACE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FLAT_TO_FACE_PROBE]]
// =================================================================================================
#define D_POSTPROCESS_FLAT_TO_FACE
#define D_REFLECTION_PROBE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_FLAT_TO_RT_COPY]]
// =================================================================================================
#define D_POSTPROCESS_FLAT_TO_RT_COPY
#define D_REFLECTION_PROBE
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CHECKERBOARD_RESOLVE_SCATTERING_EVEN]]
// =================================================================================================
#define D_POSTPROCESS_CHECKERBOARD_RESOLVE_SCATTERING
#define D_CHECKERBOARD
#define D_EVEN
#define D_UINT_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CHECKERBOARD_RESOLVE_SCATTERING_ODD]]
// =================================================================================================
#define D_POSTPROCESS_CHECKERBOARD_RESOLVE_SCATTERING
#define D_CHECKERBOARD
#define D_ODD
#define D_UINT_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS_EVEN]]
// =================================================================================================
#define D_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS
#define D_CHECKERBOARD
#define D_EVEN
#define D_UINT_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS_ODD]]
// =================================================================================================
#define D_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS
#define D_CHECKERBOARD
#define D_ODD
#define D_UINT_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS_REPROJECT_EVEN]]
// =================================================================================================
#define D_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS
#define D_CHECKERBOARD
#define D_REPROJECT
#define D_EVEN
#define D_UINT_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS_REPROJECT_ODD]]
// =================================================================================================
#define D_POSTPROCESS_CHECKERBOARD_RESOLVE_LIGHTSHAFTS
#define D_CHECKERBOARD
#define D_REPROJECT
#define D_ODD
#define D_UINT_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CHECKERBOARD_SAMPLE_POSITION_WRITE]]
// =================================================================================================
#define D_POSTPROCESS_CHECKERBOARD_SAMPLE_POSITION_WRITE
#define D_CHECKERBOARD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CHECKERBOARD_SAMPLE_POSITION_READ]]
// =================================================================================================
#define D_POSTPROCESS_CHECKERBOARD_SAMPLE_POSITION_READ
#define D_CHECKERBOARD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CHECKERBOARD_REJECT_EVEN]]
// =================================================================================================
#define D_POSTPROCESS_CHECKERBOARD_REJECT
#define D_CHECKERBOARD
#define D_EVEN
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_CHECKERBOARD_REJECT_ODD]]
// =================================================================================================
#define D_POSTPROCESS_CHECKERBOARD_REJECT
#define D_CHECKERBOARD
#define D_ODD
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REFRACT]]
// =================================================================================================
#define D_POSTPROCESS_REFRACT
#define D_FSRLUT
#include "Fullscreen/RefractionFragment.shader.h"

[[FS_POSTPROCESS_REFRACT_BEHIND]]
// =================================================================================================
#define D_POSTPROCESS_REFRACT_BEHIND
#include "Fullscreen/RefractionFragment.shader.h"

[[FS_POSTPROCESS_REFRACT_DISTORT]]
// =================================================================================================
#define D_POSTPROCESS_REFRACT_DISTORT
#include "Fullscreen/RefractionFragment.shader.h"

[[FS_POSTPROCESS_REFRACT_DISTORT_ADD]]
// =================================================================================================
#define D_POSTPROCESS_REFRACT_DISTORT
#define D_BLEND_ADD
#include "Fullscreen/RefractionFragment.shader.h"

[[FS_POSTPROCESS_FSR2_GENREACT]]
// =================================================================================================
#define D_POSTPROCESS_FSR2_GENREACT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_PSSR_GENREACT]]
// =================================================================================================
#define D_POSTPROCESS_PSSR_GENREACT
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REACT_POST_OPAQUE]]
// =================================================================================================
#define D_POSTPROCESS_REACT_POST_OPAQUE
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REACT_POST_BLEND]]
// =================================================================================================
#define D_POSTPROCESS_REACT_POST_BLEND
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REACT_POST_PARTICLES]]
// =================================================================================================
#define D_POSTPROCESS_REACT_POST_PARTICLES
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REACT_LUMA_PACK]]
// =================================================================================================
#define D_POSTPROCESS_REACT_LUMA_PACK
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REACT_GENERATE]]
// =================================================================================================
#define D_POSTPROCESS_REACT_GENERATE
#define D_UINT_SAMPLERS
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REACT_GEN_LUM_R]]
// =================================================================================================
#define D_POSTPROCESS_REACT_GEN_LUM
#define D_POSTPROCESS_REACT_GEN_LUM_RED
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define D_EXTENDED_MAPS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REACT_GEN_LUM_G]]
// =================================================================================================
#define D_POSTPROCESS_REACT_GEN_LUM
#define D_POSTPROCESS_REACT_GEN_LUM_GREEN
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define D_EXTENDED_MAPS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REACT_DOWN]]
// =================================================================================================
#define D_POSTPROCESS_REACT_DOWN
#define D_EXTENDED_MAPS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REACT_DETECT]]
// =================================================================================================
#define D_POSTPROCESS_REACT_DETECT
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define D_EXTENDED_MAPS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_REACT_RESOLVE]]
// =================================================================================================
#define D_POSTPROCESS_REACT_RESOLVE
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define D_EXTENDED_MAPS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_4_VERT]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_VERT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    4
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_4_HORIZ]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_HORIZ
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    4
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_6_VERT]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_VERT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    6
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_6_HORIZ]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_HORIZ
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    6
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_8_VERT]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_VERT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    8
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_8_HORIZ]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_HORIZ
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    8
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_10_VERT]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_VERT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    10
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_10_HORIZ]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_HORIZ
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    10
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_4_VERT]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_VERT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    4
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_4_HORIZ]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_HORIZ
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    4
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_6_VERT]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_VERT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    6
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_6_HORIZ]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_HORIZ
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    6
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_8_VERT]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_VERT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    8
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_8_HORIZ]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_HORIZ
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    8
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_10_VERT]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_VERT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    10
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT_10_HORIZ]]
// =================================================================================================
#define D_POSTPROCESS_SMOOTH_RESAMPLE
#define D_POSTPROCESS_SMOOTH_RESAMPLE_DEJITT
#define D_POSTPROCESS_SMOOTH_RESAMPLE_HORIZ
#define D_POSTPROCESS_SMOOTH_RESAMPLE_TAPS    10
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI
#define D_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI_R]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI
#define D_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI_R
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[FS_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI_RGB]]
// =================================================================================================
#define D_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI
#define D_POSTPROCESS_DOWNSAMPLE_8TAP_WRONSKI_RGB
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "Fullscreen/PostProcessFragment.shader.h"

[[VS_DUALP_PROJECT]]
// =================================================================================================
#define D_VIEW_RAY
#define D_PROJECT_TO_FAR_PLANE
#include "ImmediateModeVertex.shader.h"

[[FS_DUALP_PROJECT]]
// =================================================================================================
#define D_POSTPROCESS_DUALP_PROJECT
#include "Fullscreen/PostProcessFragment.shader.h"