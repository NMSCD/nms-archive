[[FX]]
// -----------------------------------------------------------------------------------
// Samplers
// -----------------------------------------------------------------------------------

sampler gBufferMap = sampler_state
{
    Address = Clamp;
    TexUnit = 0;
};

sampler gBuffer1Map = sampler_state
{
    Address = Clamp;
    TexUnit = 1;
};

sampler gBuffer2Map = sampler_state
{
    Address = Clamp;
    TexUnit = 2;
};

sampler gBuffer3Map = sampler_state
{
    Address = Clamp;
    TexUnit = 3;
};

sampler gBuffer4Map = sampler_state
{
    Address = Clamp;
    TexUnit = 4;
};

sampler gBuffer5Map = sampler_state
{
    Address = Clamp;
    TexUnit = 5;
};

sampler gBuffer6Map = sampler_state
{
    Address = Clamp;
    TexUnit = 6;
};

sampler gBuffer7Map = sampler_state
{
    Address = Clamp;
    TexUnit = 7;
};

sampler gBuffer8Map = sampler_state
{
    Address = Clamp;
    TexUnit = 8;
};

sampler gBuffer9Map = sampler_state
{
    Address = Clamp;
    TexUnit = 9;
};

sampler gBuffer10Map = sampler_state
{
    Address = Clamp;
    TexUnit = 10;
};

sampler gBuffer0iMap = sampler_state
{
    Address = Clamp;
    TexUnit = 10;
};

sampler gBiasMap = sampler_state
{
    DefaultTexture  = SHADER/BIAS.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 11;
};

sampler gDfgMap = sampler_state
{
    DefaultTexture  = SHADER/DFG.DDS;
    SamplingOptions = On;
    Filter  = Bilinear;
    Address = Clamp;
    TexUnit = 12;
};

sampler gStbnMap = sampler_state
{
    DefaultTexture  = SHADER/STBN.DDS;
    SamplingOptions = On;
    Filter  = None;
    Address = Wrap;
    TexUnit = 13;
};

sampler gDiffEnvMap = sampler_state
{
    TexUnit = 14;
};

sampler gSpecEnvMap = sampler_state
{
    TexUnit = 15;
};

sampler gProbe00Map = sampler_state
{
    DefaultTexture  = SHADER/AMBIENTTEST.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 16;
};

sampler gProbe01Map = sampler_state
{
    DefaultTexture  = SHADER/AMBIENTTEST.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 17;
};

sampler gProbe02Map = sampler_state
{
    DefaultTexture  = SHADER/AMBIENTTEST.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 18;
};

sampler gProbe03Map = sampler_state
{
    DefaultTexture  = SHADER/AMBIENTTEST.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 19;
};

sampler gProbe04Map = sampler_state
{
    DefaultTexture  = SHADER/AMBIENTTEST.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 20;
};

sampler gProbe05Map = sampler_state
{
    DefaultTexture  = SHADER/AMBIENTTEST.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 21;
};

sampler gProbe06Map = sampler_state
{
    DefaultTexture  = SHADER/AMBIENTTEST.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 22;
};

sampler gProbe07Map = sampler_state
{
    DefaultTexture  = SHADER/AMBIENTTEST.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 23;
};

sampler gResolveOut = sampler_state
{
    ImgUnit = 0;
};

// -----------------------------------------------------------------------------------
// Uniforms
// -----------------------------------------------------------------------------------

// custom
float4 gCustomParamsVec4    = { 0, 0, 0, 0 };

// probes
float4 gaProbePositionsVec4;
float4 gaProbeExtentsVec4;
float4 gaProbeMat4;

// -----------------------------------------------------------------------------------
// Contexts
// -----------------------------------------------------------------------------------

context [ !MACOS !IOS !SWITCH ] SSR_RPJ_MASK
{
    VertexShader = compile GLSL VS_SSR_FSQUAD;
    PixelShader  = compile GLSL FS_SSR_REPROJECT_MASK;
}

context [ !IOS !SWITCH ] SSR_DEPTH_DOWN
{
    VertexShader = compile GLSL VS_SSR_FSQUAD;
    PixelShader  = compile GLSL FS_SSR_DEPTH_DOWN;
}

context [ !IOS !SWITCH ] SSR_PARAMS
{
    VertexShader = compile GLSL VS_SSR_FSQUAD;
    PixelShader  = compile GLSL FS_SSR_PARAMS;
}

context [ !IOS !SWITCH ] SSR_MARCH
{
    VertexShader = compile GLSL VS_SSR_FSQUAD_PROBE;
    PixelShader  = compile GLSL FS_SSR_MARCH;
}

context [ !IOS !SWITCH ] SSR_REUSE_0
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_REUSE_0;
}

context [ !IOS !SWITCH ] SSR_REUSE_1
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_REUSE_1;
}

context [ !IOS !SWITCH ] SSR_REUSE_2
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_REUSE_2;
}

context [ !IOS !SWITCH ] SSR_REUSE_3
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_REUSE_3;
}

context [ !MACOS !IOS !SWITCH ] SSR_REUSE_RESOLVE
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_REUSE_RESOLVE;
}

context [ !MACOS !IOS !SWITCH ] SSR_RESOLVE
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD_PROBE;
    PixelShader     = compile GLSL FS_SSR_RESOLVE;
}

context [ !MACOS !IOS !SWITCH ] SSR_HIT_DIST
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_HIT_DISTANCE;
}

context [ !IOS !SWITCH ] SSR_TEMPORAL
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_TEMPORAL;
}

context [ !MACOS !IOS !SWITCH ] SSR_DISOCCLUSION
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_DISOCCLUSION;
}

context [ !MACOS !IOS !SWITCH ] SSR_MEDIAN
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_MEDIAN;
}

context [ !IOS !SWITCH ] SSR_APPLY
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_APPLY;
}

context [ !IOS !SWITCH ] PROBE_REFLECTIONS
{
    VertexShader    = compile GLSL VS_SSR_FSQUAD_PROBE;
    PixelShader     = compile GLSL FS_PROBE_REFLECTIONS;
}

[[VS_SSR_FSQUAD]]
// =================================================================================================
#define D_TEX_QUAD
#define D_SSR_SHADER
#include "ImmediateModeVertex.shader.h"

[[VS_SSR_FSQUAD_PROBE]]
// =================================================================================================
#define D_TEX_QUAD
#define D_SSR_SHADER
#define D_SSR_USES_PROBES
#include "ImmediateModeVertex.shader.h"

[[FS_SSR_REPROJECT_MASK]]
// =================================================================================================
#define D_SSR_REPROJECT_MASK
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_DEPTH_DOWN]]
// =================================================================================================
#define D_SSR_DEPTH_DOWN
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_PARAMS]]
// =================================================================================================
#define D_SSR_PARAMS
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_MARCH]]
// =================================================================================================
#define D_SSR_MARCH
#define D_SSR_SHADER
#define D_SSR_USES_PROBES
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_REUSE_0]]
// =================================================================================================
#define D_SSR_REUSE
#define D_SSR_SHADER
#define D_SSR_REUSE_IDX     0
#define D_SSR_REUSE_X       0
#define D_SSR_REUSE_Y       0
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_REUSE_1]]
// =================================================================================================
#define D_SSR_REUSE
#define D_SSR_SHADER
#define D_SSR_REUSE_IDX     1
#define D_SSR_REUSE_X       1
#define D_SSR_REUSE_Y       0
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_REUSE_2]]
// =================================================================================================
#define D_SSR_REUSE
#define D_SSR_SHADER
#define D_SSR_REUSE_IDX     2
#define D_SSR_REUSE_X       0
#define D_SSR_REUSE_Y       1
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_REUSE_3]]
// =================================================================================================
#define D_SSR_REUSE
#define D_SSR_SHADER
#define D_SSR_REUSE_IDX     3
#define D_SSR_REUSE_X       1
#define D_SSR_REUSE_Y       1
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_REUSE_RESOLVE]]
// =================================================================================================
#define D_SSR_REUSE_RESOLVE
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_RESOLVE]]
// =================================================================================================
#define D_SSR_RESOLVE
#define D_SSR_SHADER
#define D_SSR_USES_PROBES
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_HIT_DISTANCE]]
// =================================================================================================
#define D_SSR_HIT_DISTANCE
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_TEMPORAL]]
// =================================================================================================
#define D_SSR_TEMPORAL
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_DISOCCLUSION]]
// =================================================================================================
#define D_SSR_DISOCCLUSION
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_MEDIAN]]
// =================================================================================================
#define D_SSR_MEDIAN
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_APPLY]]
// =================================================================================================
#define D_SSR_APPLY
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_PROBE_REFLECTIONS]]
// =================================================================================================
#define D_SSR_SHADER
#define D_SSR_USES_PROBES
#define D_PROBE_REFLECTIONS
#include "Fullscreen/SSRFragment.shader.h"
